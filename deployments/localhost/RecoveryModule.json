{
  "address": "0x82e01223d51Eb87e16A03E24687EDF0F294da6f1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GuardiansUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "RecoveryCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newOwners",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "RecoveryExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newOwners",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "expireTime",
          "type": "uint48"
        }
      ],
      "name": "RecoveryStarted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "configsHash",
          "type": "bytes32"
        }
      ],
      "name": "addConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "cancelRecovery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "configIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "guardianVerifier",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "signer",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Identity",
              "name": "guardian",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct Permission[]",
          "name": "permissions",
          "type": "tuple[]"
        }
      ],
      "name": "cancelRecoveryByGuardians",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "policyVerifier",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "guardianVerifier",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signer",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Identity",
                  "name": "guardian",
                  "type": "tuple"
                },
                {
                  "internalType": "uint64",
                  "name": "property",
                  "type": "uint64"
                }
              ],
              "internalType": "struct GuardianInfo[]",
              "name": "guardianInfos",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "threshold",
                  "type": "uint64"
                },
                {
                  "internalType": "uint48",
                  "name": "lockPeriod",
                  "type": "uint48"
                }
              ],
              "internalType": "struct ThresholdConfig[]",
              "name": "thresholdConfigs",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct RecoveryConfigArg[]",
          "name": "configArgs",
          "type": "tuple[]"
        }
      ],
      "name": "executeConfigsUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "executeRecovery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRecoveryConfigs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "policyVerifier",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "guardianVerifier",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signer",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Identity",
                  "name": "guardian",
                  "type": "tuple"
                },
                {
                  "internalType": "uint64",
                  "name": "property",
                  "type": "uint64"
                }
              ],
              "internalType": "struct GuardianInfo[]",
              "name": "guardianInfos",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "threshold",
                  "type": "uint64"
                },
                {
                  "internalType": "uint48",
                  "name": "lockPeriod",
                  "type": "uint48"
                }
              ],
              "internalType": "struct ThresholdConfig[]",
              "name": "thresholdConfigs",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct RecoveryConfigArg[]",
          "name": "configArgs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRecoveryNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRecoveryStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRecovering",
          "type": "bool"
        },
        {
          "internalType": "uint48",
          "name": "expiryTime",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "guardianVerifier",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signer",
              "type": "bytes"
            }
          ],
          "internalType": "struct Identity",
          "name": "guardian",
          "type": "tuple"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "configsHash",
          "type": "bytes32"
        }
      ],
      "name": "replaceConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "configIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "guardianVerifier",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "signer",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Identity",
              "name": "guardian",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct Permission[]",
          "name": "permissions",
          "type": "tuple[]"
        }
      ],
      "name": "startRecovery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "configIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "digest",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "guardianVerifier",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "signer",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Identity",
              "name": "guardian",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct Permission[]",
          "name": "permissions",
          "type": "tuple[]"
        }
      ],
      "name": "verifyPermissions",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "walletRecoveryNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ae1e86b9d37f9477121561d0e4dc3841635a33b28ca2ab4f1b1b38bcb7394c3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x82e01223d51Eb87e16A03E24687EDF0F294da6f1",
    "transactionIndex": 0,
    "gasUsed": "4660891",
    "logsBloom": "0x
    "blockHash": "0x8c155cf3a5b48fb9a78f214eb2c83c9b359f6cbe9d37a55bb0147b85e59a8a6c",
    "transactionHash": "0x4ae1e86b9d37f9477121561d0e4dc3841635a33b28ca2ab4f1b1b38bcb7394c3",
    "logs": [],
    "blockNumber": 56,
    "cumulativeGasUsed": "4660891",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "116b69c9a0be847a27c8485dfde19a9d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GuardiansUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"RecoveryCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newOwners\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"RecoveryExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newOwners\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expireTime\",\"type\":\"uint48\"}],\"name\":\"RecoveryStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configsHash\",\"type\":\"bytes32\"}],\"name\":\"addConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"cancelRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"configIndex\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"guardianVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signer\",\"type\":\"bytes\"}],\"internalType\":\"struct Identity\",\"name\":\"guardian\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Permission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"name\":\"cancelRecoveryByGuardians\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"policyVerifier\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"guardianVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signer\",\"type\":\"bytes\"}],\"internalType\":\"struct Identity\",\"name\":\"guardian\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"property\",\"type\":\"uint64\"}],\"internalType\":\"struct GuardianInfo[]\",\"name\":\"guardianInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"lockPeriod\",\"type\":\"uint48\"}],\"internalType\":\"struct ThresholdConfig[]\",\"name\":\"thresholdConfigs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct RecoveryConfigArg[]\",\"name\":\"configArgs\",\"type\":\"tuple[]\"}],\"name\":\"executeConfigsUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"executeRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRecoveryConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"policyVerifier\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"guardianVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signer\",\"type\":\"bytes\"}],\"internalType\":\"struct Identity\",\"name\":\"guardian\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"property\",\"type\":\"uint64\"}],\"internalType\":\"struct GuardianInfo[]\",\"name\":\"guardianInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"lockPeriod\",\"type\":\"uint48\"}],\"internalType\":\"struct ThresholdConfig[]\",\"name\":\"thresholdConfigs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct RecoveryConfigArg[]\",\"name\":\"configArgs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRecoveryNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRecoveryStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRecovering\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"expiryTime\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"guardianVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signer\",\"type\":\"bytes\"}],\"internalType\":\"struct Identity\",\"name\":\"guardian\",\"type\":\"tuple\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configsHash\",\"type\":\"bytes32\"}],\"name\":\"replaceConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"configIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"guardianVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signer\",\"type\":\"bytes\"}],\"internalType\":\"struct Identity\",\"name\":\"guardian\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Permission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"name\":\"startRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"configIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"guardianVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signer\",\"type\":\"bytes\"}],\"internalType\":\"struct Identity\",\"name\":\"guardian\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Permission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"name\":\"verifyPermissions\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletRecoveryNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"GuardiansUpdated(address)\":{\"details\":\"Events for updating guardians, starting for recovery, executing recovery, and canceling recovery\"}},\"kind\":\"dev\",\"methods\":{\"domainSeparator()\":{\"returns\":{\"_0\":\"the bytes32 domainSeparator for EIP-712 signature\"}},\"executeRecovery(address)\":{\"details\":\"Execute recovery temporary state -> ownerKey rotation\"},\"isGuardian(address,(address,bytes))\":{\"details\":\"Get wallet recovery info, recovery config, check if an identity is a guardian, get the nonce of social recovery, and get the recovery status of the wallet\"}},\"stateVariables\":{\"NAME\":{\"details\":\"Return the domain separator name and version for signatures Also return the domainSeparator for EIP-712 signature\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"domainSeparator()\":{\"notice\":\"returns the domainSeparator for EIP-712 signature\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RecoveryModule.sol\":\"RecoveryModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\"},\"forge-std/console2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\n/// @dev The original console.sol uses `int` and `uint` for computing function selectors, but it should\\n/// use `int256` and `uint256`. This modified version fixes that. This version is recommended\\n/// over `console.sol` if you don't need compatibility with Hardhat as the logs will show up in\\n/// forge stack traces. If you do need compatibility with Hardhat, you must use `console.sol`.\\n/// Reference: https://github.com/NomicFoundation/hardhat/issues/2178\\nlibrary console2 {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _castLogPayloadViewToPure(\\n        function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) internal pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\\n    }\\n\\n    function _sendLogPayloadView(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, int256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,int256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\"},\"src/RecoveryModule.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport \\\"./TypesAndDecoders.sol\\\";\\nimport \\\"./interfaces/IPermissionVerifier.sol\\\";\\nimport \\\"./interfaces/ISafe.sol\\\";\\nimport \\\"./interfaces/IRecoveryPolicyVerifier.sol\\\";\\nimport \\\"./libraries/HashLinkedList.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"forge-std/console2.sol\\\";\\n\\ncontract RecoveryModule {\\n    using HashLinkedList for mapping(bytes32 => bytes32);\\n\\n    struct RecoveryEntry {\\n        bytes data;\\n        uint256 executeAfter;\\n        uint256 nonce;\\n    }\\n\\n    /**\\n     * @dev Events for updating guardians, starting for recovery, executing recovery, and canceling recovery\\n     */\\n    event GuardiansUpdated(address account);\\n\\n    event RecoveryStarted(\\n        address account,\\n        bytes newOwners,\\n        uint256 nonce,\\n        uint48 expireTime\\n    );\\n\\n    event RecoveryExecuted(address account, bytes newOwners, uint256 nonce);\\n    event RecoveryCanceled(address account, uint256 nonce);\\n\\n    /**\\n     * @dev Return the domain separator name and version for signatures\\n     * Also return the domainSeparator for EIP-712 signature\\n     */\\n\\n    string public constant NAME = \\\"Recovery Module\\\";\\n    string public constant VERSION = \\\"0.0.1\\\";\\n\\n    // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 private constant _DOMAIN_SEPARATOR_TYPEHASH =\\n        0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    bytes32 internal constant _START_RECOVERY_TYPEHASH =\\n        keccak256(\\n            \\\"startRecovery(address account,bytes newOwner,uint256 nonce)\\\"\\n        );\\n\\n    bytes32 internal constant _CANCEL_RECOVERY_TYPEHASH =\\n        keccak256(\\\"cancelRecovery(address account,uint256 nonce)\\\");\\n\\n    mapping(address => uint256) public walletRecoveryNonce;\\n    mapping(address => RecoveryConfig[]) internal walletConfigs;\\n\\n    mapping(address => mapping(bytes32 => uint256)) approvedRecords;\\n    mapping(address => RecoveryEntry) recoveryEntries;\\n    mapping(address => PendingConfig) pendingConfigs;\\n\\n    modifier InRecovering(address account) {\\n        require(\\n            recoveryEntries[account].executeAfter > 0,\\n            \\\"no ongoing recovery\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier NotInRecovering(address account) {\\n        require(recoveryEntries[account].executeAfter == 0, \\\"ongoing recovery\\\");\\n        _;\\n    }\\n\\n    function getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /// @notice             returns the domainSeparator for EIP-712 signature\\n    /// @return             the bytes32 domainSeparator for EIP-712 signature\\n    function domainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _DOMAIN_SEPARATOR_TYPEHASH,\\n                    keccak256(abi.encodePacked(NAME)),\\n                    keccak256(abi.encodePacked(VERSION)),\\n                    getChainID(),\\n                    this\\n                )\\n            );\\n    }\\n\\n    function replaceConfigs(\\n        bytes32 configsHash\\n    ) external NotInRecovering(msg.sender) {\\n        pendingConfigs[msg.sender] = PendingConfig({\\n            updateType: UpdateType.Replace,\\n            pendingUntil: block.timestamp + 2 days,\\n            configsHash: configsHash\\n        });\\n    }\\n\\n    function addConfigs(\\n        bytes32 configsHash\\n    ) external NotInRecovering(msg.sender) {\\n        pendingConfigs[msg.sender] = PendingConfig({\\n            updateType: UpdateType.Append,\\n            pendingUntil: block.timestamp + 2 days,\\n            configsHash: configsHash\\n        });\\n    }\\n\\n    function executeConfigsUpdate(\\n        address account,\\n        RecoveryConfigArg[] memory configArgs\\n    ) external NotInRecovering(account) {\\n        PendingConfig memory pending = pendingConfigs[account];\\n        require(block.timestamp >= pending.pendingUntil, \\\"Invalid time\\\");\\n        require(\\n            keccak256(abi.encode(configArgs)) == pending.configsHash,\\n            \\\"hash unmatched\\\"\\n        );\\n\\n        if (pending.updateType == UpdateType.Replace) {\\n            delete walletConfigs[account];\\n        }\\n        for (uint i = 0; i < configArgs.length; i++) {\\n            _addConfig(account, configArgs[i]);\\n        }\\n    }\\n\\n    function _addConfig(\\n        address account,\\n        RecoveryConfigArg memory configArg\\n    ) internal {\\n        RecoveryConfig storage config = walletConfigs[account].push();\\n        config.policyVerifier = configArg.policyVerifier;\\n\\n        for (uint i = 0; i < configArg.thresholdConfigs.length; i++) {\\n            config.thresholdConfigs.push(configArg.thresholdConfigs[i]);\\n        }\\n        for (uint i = 0; i < configArg.guardianInfos.length; i++) {\\n            bytes32 identityHash = keccak256(\\n                abi.encode(configArg.guardianInfos[i].guardian)\\n            );\\n            config.enabled = true;\\n            config.identityHashs.add(identityHash);\\n            config.guardianInfos[identityHash] = configArg.guardianInfos[i];\\n        }\\n    }\\n\\n    function verifyPermissions(\\n        address account,\\n        uint256 configIndex,\\n        bytes32 digest,\\n        Permission[] memory permissions\\n    ) public returns (uint48) {\\n        RecoveryConfig storage config = walletConfigs[account][configIndex];\\n        require(config.enabled, \\\"unenabled policy\\\");\\n\\n        bytes32[] memory identityHashs = new bytes32[](permissions.length);\\n        console2.log(\\\"Check user\\\");\\n        for (uint256 i = 0; i < permissions.length; i++) {\\n            if (permissions[i].guardian.signer.length == 0) {\\n                require(\\n                    SignatureChecker.isValidSignatureNow(\\n                        permissions[i].guardian.guardianVerifier,\\n                        digest,\\n                        permissions[i].signature\\n                    ),\\n                    \\\"invalid signature\\\"\\n                );\\n            } else {\\n                require(\\n                    IPermissionVerifier(\\n                        permissions[i].guardian.guardianVerifier\\n                    ).isValidPermission(\\n                            digest,\\n                            permissions[i].guardian.signer,\\n                            permissions[i].signature\\n                        ),\\n                    \\\"invalid signature\\\"\\n                );\\n            }\\n\\n            identityHashs[i] = keccak256(abi.encode(permissions[i].guardian));\\n        }\\n\\n        uint256 cumulatedWeight = 0;\\n        if (config.policyVerifier == address(0)) {\\n            for (uint256 i = 0; i < identityHashs.length; i++) {\\n                cumulatedWeight += config\\n                    .guardianInfos[identityHashs[i]]\\n                    .property;\\n                for (uint256 j = i + 1; j < identityHashs.length; j++) {\\n                    if (identityHashs[i] == identityHashs[j]) {\\n                        revert(\\\"duplicated guradian\\\");\\n                    }\\n                }\\n            }\\n        } else {\\n            uint64[] memory properties = new uint64[](identityHashs.length);\\n            for (uint256 i = 0; i < identityHashs.length - 1; i++) {\\n                properties[i] += config\\n                    .guardianInfos[identityHashs[i]]\\n                    .property;\\n                for (uint256 j = i + 1; j < identityHashs.length; j++) {\\n                    if (identityHashs[i] == identityHashs[j]) {\\n                        revert(\\\"duplicated guradian\\\");\\n                    }\\n                }\\n            }\\n            (bool succ, uint256 weight) = IRecoveryPolicyVerifier(\\n                config.policyVerifier\\n            ).verifyRecoveryPolicy(permissions, properties);\\n            require(succ, \\\"failed permissions\\\");\\n            cumulatedWeight += weight;\\n        }\\n\\n        uint48 lockPeriod = type(uint48).max;\\n        for (uint i = 0; i < config.thresholdConfigs.length; i++) {\\n            if (cumulatedWeight >= config.thresholdConfigs[i].threshold) {\\n                lockPeriod = config.thresholdConfigs[i].lockPeriod;\\n                break;\\n            }\\n        }\\n\\n        require(lockPeriod < type(uint48).max, \\\"threshold unmatched\\\");\\n        return lockPeriod;\\n    }\\n\\n    // Generate EIP-712 message hash,\\n    // Iterate over signatures for verification,\\n    // Verify recovery policy,\\n    // Store temporary state or recover immediately based on the result.\\n    function startRecovery(\\n        address account,\\n        uint256 configIndex,\\n        bytes memory data,\\n        Permission[] memory permissions\\n    ) external NotInRecovering(account) {\\n        walletRecoveryNonce[account]++;\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator(),\\n                keccak256(\\n                    abi.encode(\\n                        _START_RECOVERY_TYPEHASH,\\n                        account,\\n                        data,\\n                        walletRecoveryNonce[account]\\n                    )\\n                )\\n            )\\n        );\\n\\n        uint48 lockPeriod = verifyPermissions(\\n            account,\\n            configIndex,\\n            digest,\\n            permissions\\n        );\\n        if (lockPeriod == 0) {\\n            ISafe(account).execTransactionFromModule(account, 0, data, 0);\\n            emit RecoveryExecuted(account, data, walletRecoveryNonce[account]);\\n        } else {\\n            RecoveryEntry memory entry;\\n            entry.data = data;\\n            entry.nonce = walletRecoveryNonce[account];\\n            entry.executeAfter = uint48(block.timestamp) + lockPeriod;\\n\\n            recoveryEntries[account] = entry;\\n        }\\n    }\\n\\n    /**\\n     * @dev Execute recovery\\n     * temporary state -> ownerKey rotation\\n     */\\n    function executeRecovery(address account) external InRecovering(account) {\\n        require(\\n            recoveryEntries[account].executeAfter < block.timestamp,\\n            \\\"locking\\\"\\n        );\\n        ISafe(account).execTransactionFromModule(\\n            account,\\n            0,\\n            recoveryEntries[account].data,\\n            0\\n        );\\n        emit RecoveryExecuted(\\n            account,\\n            recoveryEntries[account].data,\\n            recoveryEntries[account].nonce\\n        );\\n        delete recoveryEntries[account];\\n    }\\n\\n    function cancelRecovery(address account) external InRecovering(account) {\\n        emit RecoveryCanceled(account, recoveryEntries[account].nonce);\\n        delete recoveryEntries[account];\\n    }\\n\\n    function cancelRecoveryByGuardians(\\n        address account,\\n        uint256 configIndex,\\n        Permission[] memory permissions\\n    ) external InRecovering(account) {\\n        walletRecoveryNonce[account]++;\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator(),\\n                keccak256(\\n                    abi.encode(\\n                        _CANCEL_RECOVERY_TYPEHASH,\\n                        account,\\n                        walletRecoveryNonce[account]\\n                    )\\n                )\\n            )\\n        );\\n\\n        verifyPermissions(account, configIndex, digest, permissions);\\n\\n        emit RecoveryCanceled(account, recoveryEntries[account].nonce);\\n        delete recoveryEntries[account];\\n    }\\n\\n    /**\\n     * @dev Get wallet recovery info, recovery config, check if an identity is a guardian, get the nonce of social recovery, and get the recovery status of the wallet\\n     */\\n    function isGuardian(\\n        address account,\\n        Identity memory guardian\\n    ) public view returns (bool) {\\n        RecoveryConfig[] storage configs = walletConfigs[account];\\n        bytes32 guardianHash = keccak256(abi.encode(guardian));\\n        for (uint256 i = 0; i < configs.length; i++) {\\n            bool exist = configs[i].identityHashs.isExist(guardianHash);\\n            if (exist) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getRecoveryConfigs(\\n        address account\\n    ) public view returns (RecoveryConfigArg[] memory configArgs) {\\n        RecoveryConfig[] storage configs = walletConfigs[account];\\n        configArgs = new RecoveryConfigArg[](configs.length);\\n        for (uint256 i = 0; i < configs.length; i++) {\\n            RecoveryConfigArg memory configArg;\\n            bytes32[] memory identityHashs = configs[i].identityHashs.list(\\n                HashLinkedList.SENTINEL_HASH,\\n                configs[i].identityHashs.size()\\n            );\\n\\n            for (uint256 j = 0; j < identityHashs.length; j++) {\\n                configArg.guardianInfos = new GuardianInfo[](\\n                    identityHashs.length\\n                );\\n                configArg.guardianInfos[j] = configs[i].guardianInfos[\\n                    identityHashs[j]\\n                ];\\n            }\\n            configArg.policyVerifier = configs[i].policyVerifier;\\n            configArg.thresholdConfigs = configs[i].thresholdConfigs;\\n            configArgs[i] = configArg;\\n        }\\n    }\\n\\n    function getRecoveryNonce(\\n        address account\\n    ) public view returns (uint256 nonce) {\\n        return walletRecoveryNonce[account];\\n    }\\n\\n    function getRecoveryStatus(\\n        address account\\n    ) public view returns (bool isRecovering, uint48 expiryTime) {\\n        RecoveryEntry memory status = recoveryEntries[account];\\n        isRecovering = status.executeAfter > 0 ? true : false;\\n        expiryTime = uint48(status.executeAfter);\\n    }\\n}\\n\",\"keccak256\":\"0xf91afd195b695a402c2ee91250e3f53e32d8f153eb87dc0357a5a4057f5af999\",\"license\":\"LGPL-3.0-only\"},\"src/TypesAndDecoders.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Structure representing an identity with its signature/proof verification logic.\\n * Represents an EOA/CA account when signer is empty,use `verifier`as the actual signer for signature verification.\\n * OtherWise execute IGuardianPermissionVerifier(verifier).isValidPermission(signer,hash,signature).\\n */\\nstruct Identity {\\n    address guardianVerifier;\\n    bytes signer;\\n}\\n\\n/**\\n * @dev Structure representing a guardian with a property\\n * The property of Guardian are defined by the associated RecoveryPolicyVerifier contract.\\n */\\nstruct GuardianInfo {\\n    Identity guardian;\\n    uint64 property; //eg.,Weight,Percentage,Role with weight,etc.\\n}\\n\\n/**\\n * @dev Structure representing a threshold configuration\\n */\\nstruct ThresholdConfig {\\n    uint64 threshold; // Threshold value\\n    uint48 lockPeriod; // Lock period for the threshold\\n}\\n\\n/**\\n * @dev Structure representing a recovery configuration\\n * A RecoveryConfig can have multiple threshold configurations for different threshold values and their lock periods\\n */\\nstruct RecoveryConfigArg {\\n    address policyVerifier;\\n    GuardianInfo[] guardianInfos;\\n    ThresholdConfig[] thresholdConfigs;\\n}\\n\\nenum UpdateType {\\n    Replace,\\n    Append\\n}\\n\\nstruct PendingConfig {\\n    UpdateType updateType;\\n    uint256 pendingUntil;\\n    bytes32 configsHash;\\n}\\n\\n/**\\n * @dev Structure representing a recovery configuration\\n * A RecoveryConfig can have multiple threshold configurations for different threshold values and their lock periods\\n */\\nstruct RecoveryConfig {\\n    bool enabled;\\n    address policyVerifier;\\n    mapping(bytes32 => bytes32) identityHashs;\\n    mapping(bytes32 => GuardianInfo) guardianInfos;\\n    ThresholdConfig[] thresholdConfigs;\\n}\\n\\nstruct Permission {\\n    Identity guardian;\\n    bytes signature;\\n}\\n\",\"keccak256\":\"0xa6c8e31854e4bad5ab97db3aac842a4f180b506eeb79d1b1ca7df3a2910806ae\",\"license\":\"LGPL-3.0-only\"},\"src/interfaces/IPermissionVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface for no-account type identity signature/proof verification\\n */\\ninterface IPermissionVerifier {\\n    /**\\n     * @dev Check if the signer key format is correct\\n     */\\n    function isValidSigners(bytes[] memory signers) external returns (bool);\\n\\n    /**\\n     * @dev Validate signature\\n     */\\n    function isValidPermission(\\n        bytes32 hash,\\n        bytes memory signer,\\n        bytes memory signature\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Validate signatures\\n     */\\n    function isValidPermissions(\\n        bytes32 hash,\\n        bytes[] memory signers,\\n        bytes[] memory signatures\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Return supported signer key information, format, signature format, hash algorithm, etc.\\n     * MAY TODO:using ERC-3668: ccip-read\\n     */\\n    function getGuardianVerifierInfo() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xb89bb87198f4b340d98a3b317efd18f61c777dc1a783dfa8b03fb8d8be6fd5e0\",\"license\":\"LGPL-3.0-only\"},\"src/interfaces/IRecoveryPolicyVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport \\\"../TypesAndDecoders.sol\\\";\\n\\n/**\\n * @dev Interface for recovery policy verification\\n */\\ninterface IRecoveryPolicyVerifier {\\n    /**\\n     * @dev Verify recovery policy and return verification success and lock period\\n     * Verification includes checking if guardians exist in the Guardians List\\n     */\\n    function verifyRecoveryPolicy(\\n        Permission[] memory permissions,\\n        uint64[] memory properties\\n    ) external view returns (bool succ, uint64 weight);\\n\\n    /**\\n     * @dev Returns supported policy settings and accompanying property definitions for Guardian.\\n     */\\n     \\n    function getPolicyVerifierInfo() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x911b11d99bcfb97f9786c2a93db3f1781908087435267d4ba14522ba6e2abd8c\",\"license\":\"LGPL-3.0-only\"},\"src/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface ISafe {\\n    /**\\n     * @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     */\\n    function execTransactionFromModule(address to, uint256 value, bytes memory data, uint8 operation) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) external view;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns array of modules.\\n     * @param start Start of the page.\\n     * @param pageSize Maximum number of modules that should be returned.\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be enabled.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6e679e5531d43880b98883839484839d03fbcee5f6f0f07e61aacc3533b219f\",\"license\":\"LGPL-3.0-only\"},\"src/libraries/HashLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\nlibrary HashLinkedList {\\n    bytes32 internal constant SENTINEL_HASH = bytes32(uint256(1));\\n\\n    function add(\\n        mapping(bytes32 => bytes32) storage self,\\n        bytes32 hash\\n    ) internal {\\n        if (self[hash] != bytes32(0)) {\\n            revert(\\\"HASH_ALREADY_EXISTS\\\");\\n        }\\n        bytes32 _prev = self[SENTINEL_HASH];\\n        if (_prev == bytes32(0)) {\\n            self[SENTINEL_HASH] = hash;\\n            self[hash] = SENTINEL_HASH;\\n        } else {\\n            self[SENTINEL_HASH] = hash;\\n            self[hash] = _prev;\\n        }\\n    }\\n\\n    function replace(\\n        mapping(bytes32 => bytes32) storage self,\\n        bytes32 oldAddr,\\n        bytes32 newAddr\\n    ) internal {\\n        if (!isExist(self, oldAddr)) {\\n            revert(\\\"HASH_NOT_EXIST\\\");\\n        }\\n        if (isExist(self, newAddr)) {\\n            revert(\\\"HASH_ALREADY_EXISTS\\\");\\n        }\\n\\n        bytes32 cursor = SENTINEL_HASH;\\n        while (true) {\\n            bytes32 _hash = self[cursor];\\n            if (_hash == oldAddr) {\\n                bytes32 next = self[_hash];\\n                self[newAddr] = next;\\n                self[cursor] = newAddr;\\n                self[_hash] = bytes32(0);\\n                return;\\n            }\\n            cursor = _hash;\\n        }\\n    }\\n\\n    function remove(\\n        mapping(bytes32 => bytes32) storage self,\\n        bytes32 hash\\n    ) internal {\\n        if (!tryRemove(self, hash)) {\\n            revert(\\\"HASH_NOT_EXIST\\\");\\n        }\\n    }\\n\\n    function tryRemove(\\n        mapping(bytes32 => bytes32) storage self,\\n        bytes32 hash\\n    ) internal returns (bool) {\\n        if (isExist(self, hash)) {\\n            bytes32 cursor = SENTINEL_HASH;\\n            while (true) {\\n                bytes32 _hash = self[cursor];\\n                if (_hash == hash) {\\n                    bytes32 next = self[_hash];\\n                    self[cursor] = next;\\n                    self[_hash] = bytes32(0);\\n                    return true;\\n                }\\n                cursor = _hash;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function clear(mapping(bytes32 => bytes32) storage self) internal {\\n        for (\\n            bytes32 hash = self[SENTINEL_HASH];\\n            uint256(hash) > uint256(SENTINEL_HASH);\\n            hash = self[hash]\\n        ) {\\n            self[hash] = bytes32(0);\\n        }\\n        self[SENTINEL_HASH] = bytes32(0);\\n    }\\n\\n    function isExist(\\n        mapping(bytes32 => bytes32) storage self,\\n        bytes32 hash\\n    ) internal view returns (bool) {\\n        return self[hash] != bytes32(0);\\n    }\\n\\n    function size(\\n        mapping(bytes32 => bytes32) storage self\\n    ) internal view returns (uint256) {\\n        uint256 result = 0;\\n        bytes32 hash = self[SENTINEL_HASH];\\n        while (uint256(hash) > uint256(SENTINEL_HASH)) {\\n            hash = self[hash];\\n            unchecked {\\n                result++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function isEmpty(\\n        mapping(bytes32 => bytes32) storage self\\n    ) internal view returns (bool) {\\n        return self[SENTINEL_HASH] == bytes32(0);\\n    }\\n\\n    /**\\n     * @dev This function is just an example, please copy this code directly when you need it, you should not call this function\\n     */\\n    function list(\\n        mapping(bytes32 => bytes32) storage self,\\n        bytes32 from,\\n        uint256 limit\\n    ) internal view returns (bytes32[] memory) {\\n        bytes32[] memory result = new bytes32[](limit);\\n        uint256 i = 0;\\n        bytes32 hash = self[from];\\n        while (uint256(hash) > uint256(SENTINEL_HASH) && i < limit) {\\n            result[i] = hash;\\n            hash = self[hash];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xea882ecd12908e3b1ffcbd443db61c997ce648d6b3d818c68f9828b344da6aa7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615394806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063a89b531711610097578063c90db44711610066578063c90db447146102d0578063f698da25146102ec578063fe71d0711461030a578063ffa1ad741461032657610100565b8063a89b531714610224578063b055740c14610254578063b1cba5b414610284578063b5f6627a146102b457610100565b80634dbc41ef116100d35780634dbc41ef1461019e5780637b12e370146101ce578063a374a3b3146101ea578063a3f4df7e1461020657610100565b806307c73d341461010557806312cf32df14610136578063285bfd44146101665780633bc2c4a714610182575b600080fd5b61011f600480360381019061011a9190613105565b610344565b60405161012d92919061316e565b60405180910390f35b610150600480360381019061014b9190613353565b610460565b60405161015d91906133af565b60405180910390f35b610180600480360381019061017b9190613400565b61054d565b005b61019c60048036038101906101979190613105565b610698565b005b6101b860048036038101906101b391906135d1565b61098c565b6040516101c59190613654565b60405180910390f35b6101e860048036038101906101e3919061366f565b611271565b005b61020460048036038101906101ff919061370e565b61161a565b005b61020e6118a1565b60405161021b91906137fc565b60405180910390f35b61023e60048036038101906102399190613105565b6118da565b60405161024b9190613be7565b60405180910390f35b61026e60048036038101906102699190613105565b611db5565b60405161027b9190613c18565b60405180910390f35b61029e60048036038101906102999190613105565b611dcd565b6040516102ab9190613c18565b60405180910390f35b6102ce60048036038101906102c99190613400565b611e15565b005b6102ea60048036038101906102e59190613105565b611f61565b005b6102f46120c8565b6040516103019190613c42565b60405180910390f35b610324600480360381019061031f9190614092565b6121de565b005b61032e61247a565b60405161033b91906137fc565b60405180910390f35b6000806000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820180546103a39061411d565b80601f01602080910402602001604051908101604052809291908181526020018280546103cf9061411d565b801561041c5780601f106103f15761010080835404028352916020019161041c565b820191906000526020600020905b8154815290600101906020018083116103ff57829003601f168201915b50505050508152602001600182015481526020016002820154815250509050600081602001511161044e576000610451565b60015b92508060200151915050915091565b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000836040516020016104b7919061418b565b60405160208183030381529060405280519060200120905060005b828054905081101561053f576000610516838584815481106104f7576104f66141ad565b5b90600052602060002090600402016001016124b390919063ffffffff16565b9050801561052b576001945050505050610547565b5080806105379061420b565b9150506104d2565b506000925050505b92915050565b336000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154146105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca9061429f565b60405180910390fd5b60405180606001604052806001808111156105f1576105f06142bf565b5b81526020016202a3004261060591906142ee565b815260200183815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690836001811115610678576106776142bf565b5b021790555060208201518160010155604082015181600201559050505050565b806000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541161071e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107159061436e565b60405180910390fd5b42600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154106107a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610799906143da565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663468721a7836000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006040518563ffffffff1660e01b81526004016108249493929190614536565b6020604051808303816000875af1158015610843573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086791906145ae565b507f533d62e45d0adba34cb31c77de5b3da48392b87322107b496a66a0defc4d622f82600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015460405161091e939291906145db565b60405180910390a1600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006109769190612e88565b6001820160009055600282016000905550505050565b600080600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002085815481106109e0576109df6141ad565b5b906000526020600020906004020190508060000160009054906101000a900460ff16610a41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3890614665565b60405180910390fd5b6000835167ffffffffffffffff811115610a5e57610a5d6131ad565b5b604051908082528060200260200182016040528015610a8c5781602001602082028036833780820191505090505b509050610acd6040518060400160405280600a81526020017f436865636b2075736572000000000000000000000000000000000000000000008152506124d6565b60005b8451811015610d2c576000858281518110610aee57610aed6141ad565b5b602002602001015160000151602001515103610b9357610b4f858281518110610b1a57610b196141ad565b5b6020026020010151600001516000015187878481518110610b3e57610b3d6141ad565b5b60200260200101516020015161256f565b610b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b85906146d1565b60405180910390fd5b610cb5565b848181518110610ba657610ba56141ad565b5b6020026020010151600001516000015173ffffffffffffffffffffffffffffffffffffffff166389c18fb087878481518110610be557610be46141ad565b5b60200260200101516000015160200151888581518110610c0857610c076141ad565b5b6020026020010151602001516040518463ffffffff1660e01b8152600401610c329392919061472a565b6020604051808303816000875af1158015610c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7591906145ae565b610cb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cab906146d1565b60405180910390fd5b5b848181518110610cc857610cc76141ad565b5b602002602001015160000151604051602001610ce4919061418b565b60405160208183030381529060405280519060200120828281518110610d0d57610d0c6141ad565b5b6020026020010181815250508080610d249061420b565b915050610ad0565b5060008073ffffffffffffffffffffffffffffffffffffffff168360000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610eae5760005b8251811015610ea857836002016000848381518110610dab57610daa6141ad565b5b6020026020010151815260200190815260200160002060020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1682610dee91906142ee565b91506000600182610dff91906142ee565b90505b8351811015610e9457838181518110610e1e57610e1d6141ad565b5b6020026020010151848381518110610e3957610e386141ad565b5b602002602001015103610e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e78906147bb565b60405180910390fd5b8080610e8c9061420b565b915050610e02565b508080610ea09061420b565b915050610d89565b5061115a565b6000825167ffffffffffffffff811115610ecb57610eca6131ad565b5b604051908082528060200260200182016040528015610ef95781602001602082028036833780820191505090505b50905060005b60018451610f0d91906147db565b81101561105757846002016000858381518110610f2d57610f2c6141ad565b5b6020026020010151815260200190815260200160002060020160009054906101000a900467ffffffffffffffff16828281518110610f6e57610f6d6141ad565b5b60200260200101818151610f82919061480f565b91509067ffffffffffffffff16908167ffffffffffffffff16815250506000600182610fae91906142ee565b90505b845181101561104357848181518110610fcd57610fcc6141ad565b5b6020026020010151858381518110610fe857610fe76141ad565b5b602002602001015103611030576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611027906147bb565b60405180910390fd5b808061103b9061420b565b915050610fb1565b50808061104f9061420b565b915050610eff565b506000808560000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638444e54589856040518363ffffffff1660e01b81526004016110ba929190614a00565b6040805180830381865afa1580156110d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fa9190614a4c565b67ffffffffffffffff169150915081611148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113f90614ad8565b60405180910390fd5b808461115491906142ee565b93505050505b600065ffffffffffff905060005b846003018054905081101561120f5784600301818154811061118d5761118c6141ad565b5b9060005260206000200160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1683106111fc578460030181815481106111d5576111d46141ad565b5b9060005260206000200160000160089054906101000a900465ffffffffffff16915061120f565b80806112079061420b565b915050611168565b5065ffffffffffff80168165ffffffffffff1610611262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125990614b44565b60405180910390fd5b80945050505050949350505050565b836000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154146112f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ee9061429f565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906113469061420b565b919050555060006113556120c8565b7fc8c90f0f3e107683360009b67ae75c1b8f7d7b2196e96fdfa5a3a50edaa945f787866000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516020016113ca9493929190614b64565b604051602081830303815290604052805190602001206040516020016113f1929190614c28565b60405160208183030381529060405280519060200120905060006114178787848761098c565b905060008165ffffffffffff160361152c578673ffffffffffffffffffffffffffffffffffffffff1663468721a78860008860006040518563ffffffff1660e01b815260040161146a9493929190614c5f565b6020604051808303816000875af1158015611489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad91906145ae565b507f533d62e45d0adba34cb31c77de5b3da48392b87322107b496a66a0defc4d622f87866000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161151f93929190614cab565b60405180910390a1611611565b611534612ec8565b8581600001819052506000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481604001818152505081426115919190614ce9565b65ffffffffffff1681602001818152505080600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816115f79190614eb0565b506020820151816001015560408201518160020155905050505b50505050505050565b826000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154116116a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116979061436e565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906116ef9061420b565b919050555060006116fe6120c8565b7ff4e415cf1e0aa059d1af7c0475b47006d0b2b2ed73e965c695e2f930102a658c866000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405160200161177193929190614f82565b60405160208183030381529060405280519060200120604051602001611798929190614c28565b6040516020818303038152906040528051906020012090506117bc8585838661098c565b507f81da66c7aac3ee4365918a5d70f73e846a59e8a8af01ef155e8651819049051985600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154604051611830929190614fb9565b60405180910390a1600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006118889190612e88565b6001820160009055600282016000905550505050505050565b6040518060400160405280600f81526020017f5265636f76657279204d6f64756c65000000000000000000000000000000000081525081565b60606000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050808054905067ffffffffffffffff81111561193d5761193c6131ad565b5b60405190808252806020026020018201604052801561197657816020015b611963612ee9565b81526020019060019003908161195b5790505b50915060005b8180549050811015611dae57611990612ee9565b60006119f9600160001b6119c68686815481106119b0576119af6141ad565b5b9060005260206000209060040201600101612735565b8686815481106119d9576119d86141ad565b5b90600052602060002090600402016001016127969092919063ffffffff16565b905060005b8151811015611c2157815167ffffffffffffffff811115611a2257611a216131ad565b5b604051908082528060200260200182016040528015611a5b57816020015b611a48612f20565b815260200190600190039081611a405790505b508360200181905250848481548110611a7757611a766141ad565b5b90600052602060002090600402016002016000838381518110611a9d57611a9c6141ad565b5b60200260200101518152602001908152602001600020604051806040016040529081600082016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054611b349061411d565b80601f0160208091040260200160405190810160405280929190818152602001828054611b609061411d565b8015611bad5780601f10611b8257610100808354040283529160200191611bad565b820191906000526020600020905b815481529060010190602001808311611b9057829003601f168201915b50505050508152505081526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505083602001518281518110611c0357611c026141ad565b5b60200260200101819052508080611c199061420b565b9150506119fe565b50838381548110611c3557611c346141ad565b5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838381548110611cb157611cb06141ad565b5b9060005260206000209060040201600301805480602002602001604051908101604052809291908181526020016000905b82821015611d6e578382906000526020600020016040518060400160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff168152505081526020019060010190611ce2565b50505050826040018190525081858481518110611d8e57611d8d6141ad565b5b602002602001018190525050508080611da69061420b565b91505061197c565b5050919050565b60006020528060005260406000206000915090505481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b336000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414611e9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e929061429f565b60405180910390fd5b604051806060016040528060006001811115611eba57611eb96142bf565b5b81526020016202a30042611ece91906142ee565b815260200183815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690836001811115611f4157611f406142bf565b5b021790555060208201518160010155604082015181600201559050505050565b806000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411611fe7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fde9061436e565b60405180910390fd5b7f81da66c7aac3ee4365918a5d70f73e846a59e8a8af01ef155e8651819049051982600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015460405161205a929190614fb9565b60405180910390a1600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006120b29190612e88565b6001820160009055600282016000905550505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6040518060400160405280600f81526020017f5265636f76657279204d6f64756c6500000000000000000000000000000000008152506040516020016121349190615013565b604051602081830303815290604052805190602001206040518060400160405280600581526020017f302e302e310000000000000000000000000000000000000000000000000000008152506040516020016121909190615013565b604051602081830303815290604052805190602001206121ae61286a565b306040516020016121c395949392919061507f565b60405160208183030381529060405280519060200120905090565b816000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414612264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225b9061429f565b60405180910390fd5b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660018111156122d5576122d46142bf565b5b60018111156122e7576122e66142bf565b5b81526020016001820154815260200160028201548152505090508060200151421015612348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233f9061511e565b60405180910390fd5b80604001518360405160200161235e9190613be7565b60405160208183030381529060405280519060200120146123b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ab9061518a565b60405180910390fd5b600060018111156123c8576123c76142bf565b5b816000015160018111156123df576123de6142bf565b5b0361243057600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061242f9190612f4a565b5b60005b83518110156124735761246085858381518110612453576124526141ad565b5b6020026020010151612877565b808061246b9061420b565b915050612433565b5050505050565b6040518060400160405280600581526020017f302e302e3100000000000000000000000000000000000000000000000000000081525081565b60008060001b836000848152602001908152602001600020541415905092915050565b61256c816040516024016124ea91906137fc565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b5f565b50565b600080600061257e8585612b79565b9150915060006004811115612596576125956142bf565b5b8160048111156125a9576125a86142bf565b5b1480156125e157508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156125f15760019250505061272e565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b88886040516024016126269291906151aa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516126909190615216565b600060405180830381855afa9150503d80600081146126cb576040519150601f19603f3d011682016040523d82523d6000602084013e6126d0565b606091505b50915091508180156126e3575060208151145b80156127275750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190518101906127259190615242565b145b9450505050505b9392505050565b600080600090506000836000600160001b81526020019081526020016000205490505b600160001b60001c8160001c111561278c578360008281526020019081526020016000205490508180600101925050612758565b8192505050919050565b606060008267ffffffffffffffff8111156127b4576127b36131ad565b5b6040519080825280602002602001820160405280156127e25781602001602082028036833780820191505090505b5090506000808660008781526020019081526020016000205490505b600160001b60001c8160001c11801561281657508482105b1561285d578083838151811061282f5761282e6141ad565b5b60200260200101818152505086600082815260200190815260200160002054905081806001019250506127fe565b8293505050509392505050565b6000804690508091505090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600181600181540180825580915050039060005260206000209060040201905081600001518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b8260400151518110156129e657816003018360400151828151811061294a576129496141ad565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548165ffffffffffff021916908365ffffffffffff160217905550505080806129de9061420b565b915050612922565b5060005b826020015151811015612b5957600083602001518281518110612a1057612a0f6141ad565b5b602002602001015160000151604051602001612a2c919061418b565b60405160208183030381529060405280519060200120905060018360000160006101000a81548160ff021916908315150217905550612a778184600101612bfa90919063ffffffff16565b83602001518281518110612a8e57612a8d6141ad565b5b602002602001015183600201600083815260200190815260200160002060008201518160000160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081612b109190614eb0565b50505060208201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550905050508080612b519061420b565b9150506129ea565b50505050565b612b7681612b6e612ce9612d12565b63ffffffff16565b50565b6000806041835103612bba5760008060006020860151925060408601519150606086015160001a9050612bae87828585612d1d565b94509450505050612bf3565b6040835103612bea576000806020850151915060408501519050612bdf868383612e29565b935093505050612bf3565b60006002915091505b9250929050565b6000801b8260008381526020019081526020016000205414612c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c48906152bb565b60405180910390fd5b6000826000600160001b81526020019081526020016000205490506000801b8103612cb15781836000600160001b815260200190815260200160002081905550600160001b83600084815260200190815260200160002081905550612ce4565b81836000600160001b81526020019081526020016000208190555080836000848152602001908152602001600020819055505b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b612f6e819050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612d58576000600391509150612e20565b601b8560ff1614158015612d705750601c8560ff1614155b15612d82576000600491509150612e20565b600060018787878760405160008152602001604052604051612da794939291906152ea565b6020604051602081039080840390855afa158015612dc9573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612e1757600060019250925050612e20565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c612e6c91906142ee565b9050612e7a87828885612d1d565b935093505050935093915050565b508054612e949061411d565b6000825580601f10612ea65750612ec5565b601f016020900490600052602060002090810190612ec49190612f78565b5b50565b60405180606001604052806060815260200160008152602001600081525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b6040518060400160405280612f33612f95565b8152602001600067ffffffffffffffff1681525090565b5080546000825560040290600052602060002090810190612f6b9190612fc5565b50565b612f7661532f565b565b5b80821115612f91576000816000905550600101612f79565b5090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b5b8082111561302357600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201600061301a9190613027565b50600401612fc6565b5090565b50805460008255906000526020600020908101906130459190613048565b50565b5b8082111561308f57600080820160006101000a81549067ffffffffffffffff02191690556000820160086101000a81549065ffffffffffff021916905550600101613049565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006130d2826130a7565b9050919050565b6130e2816130c7565b81146130ed57600080fd5b50565b6000813590506130ff816130d9565b92915050565b60006020828403121561311b5761311a61309d565b5b6000613129848285016130f0565b91505092915050565b60008115159050919050565b61314781613132565b82525050565b600065ffffffffffff82169050919050565b6131688161314d565b82525050565b6000604082019050613183600083018561313e565b613190602083018461315f565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6131e58261319c565b810181811067ffffffffffffffff82111715613204576132036131ad565b5b80604052505050565b6000613217613093565b905061322382826131dc565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115613252576132516131ad565b5b61325b8261319c565b9050602081019050919050565b82818337600083830152505050565b600061328a61328584613237565b61320d565b9050828152602081018484840111156132a6576132a5613232565b5b6132b1848285613268565b509392505050565b600082601f8301126132ce576132cd61322d565b5b81356132de848260208601613277565b91505092915050565b6000604082840312156132fd576132fc613197565b5b613307604061320d565b90506000613317848285016130f0565b600083015250602082013567ffffffffffffffff81111561333b5761333a613228565b5b613347848285016132b9565b60208301525092915050565b6000806040838503121561336a5761336961309d565b5b6000613378858286016130f0565b925050602083013567ffffffffffffffff811115613399576133986130a2565b5b6133a5858286016132e7565b9150509250929050565b60006020820190506133c4600083018461313e565b92915050565b6000819050919050565b6133dd816133ca565b81146133e857600080fd5b50565b6000813590506133fa816133d4565b92915050565b6000602082840312156134165761341561309d565b5b6000613424848285016133eb565b91505092915050565b6000819050919050565b6134408161342d565b811461344b57600080fd5b50565b60008135905061345d81613437565b92915050565b600067ffffffffffffffff82111561347e5761347d6131ad565b5b602082029050602081019050919050565b600080fd5b6000604082840312156134aa576134a9613197565b5b6134b4604061320d565b9050600082013567ffffffffffffffff8111156134d4576134d3613228565b5b6134e0848285016132e7565b600083015250602082013567ffffffffffffffff81111561350457613503613228565b5b613510848285016132b9565b60208301525092915050565b600061352f61352a84613463565b61320d565b905080838252602082019050602084028301858111156135525761355161348f565b5b835b8181101561359957803567ffffffffffffffff8111156135775761357661322d565b5b8086016135848982613494565b85526020850194505050602081019050613554565b5050509392505050565b600082601f8301126135b8576135b761322d565b5b81356135c884826020860161351c565b91505092915050565b600080600080608085870312156135eb576135ea61309d565b5b60006135f9878288016130f0565b945050602061360a8782880161344e565b935050604061361b878288016133eb565b925050606085013567ffffffffffffffff81111561363c5761363b6130a2565b5b613648878288016135a3565b91505092959194509250565b6000602082019050613669600083018461315f565b92915050565b600080600080608085870312156136895761368861309d565b5b6000613697878288016130f0565b94505060206136a88782880161344e565b935050604085013567ffffffffffffffff8111156136c9576136c86130a2565b5b6136d5878288016132b9565b925050606085013567ffffffffffffffff8111156136f6576136f56130a2565b5b613702878288016135a3565b91505092959194509250565b6000806000606084860312156137275761372661309d565b5b6000613735868287016130f0565b93505060206137468682870161344e565b925050604084013567ffffffffffffffff811115613767576137666130a2565b5b613773868287016135a3565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156137b757808201518184015260208101905061379c565b60008484015250505050565b60006137ce8261377d565b6137d88185613788565b93506137e8818560208601613799565b6137f18161319c565b840191505092915050565b6000602082019050818103600083015261381681846137c3565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613853816130c7565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60006138ac82613885565b6138b68185613890565b93506138c6818560208601613799565b6138cf8161319c565b840191505092915050565b60006040830160008301516138f2600086018261384a565b506020830151848203602086015261390a82826138a1565b9150508091505092915050565b600067ffffffffffffffff82169050919050565b61393481613917565b82525050565b6000604083016000830151848203600086015261395782826138da565b915050602083015161396c602086018261392b565b508091505092915050565b6000613983838361393a565b905092915050565b6000602082019050919050565b60006139a382613859565b6139ad8185613864565b9350836020820285016139bf85613875565b8060005b858110156139fb57848403895281516139dc8582613977565b94506139e78361398b565b925060208a019950506001810190506139c3565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613a428161314d565b82525050565b604082016000820151613a5e600085018261392b565b506020820151613a716020850182613a39565b50505050565b6000613a838383613a48565b60408301905092915050565b6000602082019050919050565b6000613aa782613a0d565b613ab18185613a18565b9350613abc83613a29565b8060005b83811015613aed578151613ad48882613a77565b9750613adf83613a8f565b925050600181019050613ac0565b5085935050505092915050565b6000606083016000830151613b12600086018261384a565b5060208301518482036020860152613b2a8282613998565b91505060408301518482036040860152613b448282613a9c565b9150508091505092915050565b6000613b5d8383613afa565b905092915050565b6000602082019050919050565b6000613b7d8261381e565b613b878185613829565b935083602082028501613b998561383a565b8060005b85811015613bd55784840389528151613bb68582613b51565b9450613bc183613b65565b925060208a01995050600181019050613b9d565b50829750879550505050505092915050565b60006020820190508181036000830152613c018184613b72565b905092915050565b613c128161342d565b82525050565b6000602082019050613c2d6000830184613c09565b92915050565b613c3c816133ca565b82525050565b6000602082019050613c576000830184613c33565b92915050565b600067ffffffffffffffff821115613c7857613c776131ad565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613ca457613ca36131ad565b5b602082029050602081019050919050565b613cbe81613917565b8114613cc957600080fd5b50565b600081359050613cdb81613cb5565b92915050565b600060408284031215613cf757613cf6613197565b5b613d01604061320d565b9050600082013567ffffffffffffffff811115613d2157613d20613228565b5b613d2d848285016132e7565b6000830152506020613d4184828501613ccc565b60208301525092915050565b6000613d60613d5b84613c89565b61320d565b90508083825260208201905060208402830185811115613d8357613d8261348f565b5b835b81811015613dca57803567ffffffffffffffff811115613da857613da761322d565b5b808601613db58982613ce1565b85526020850194505050602081019050613d85565b5050509392505050565b600082601f830112613de957613de861322d565b5b8135613df9848260208601613d4d565b91505092915050565b600067ffffffffffffffff821115613e1d57613e1c6131ad565b5b602082029050602081019050919050565b613e378161314d565b8114613e4257600080fd5b50565b600081359050613e5481613e2e565b92915050565b600060408284031215613e7057613e6f613197565b5b613e7a604061320d565b90506000613e8a84828501613ccc565b6000830152506020613e9e84828501613e45565b60208301525092915050565b6000613ebd613eb884613e02565b61320d565b90508083825260208201905060408402830185811115613ee057613edf61348f565b5b835b81811015613f095780613ef58882613e5a565b845260208401935050604081019050613ee2565b5050509392505050565b600082601f830112613f2857613f2761322d565b5b8135613f38848260208601613eaa565b91505092915050565b600060608284031215613f5757613f56613197565b5b613f61606061320d565b90506000613f71848285016130f0565b600083015250602082013567ffffffffffffffff811115613f9557613f94613228565b5b613fa184828501613dd4565b602083015250604082013567ffffffffffffffff811115613fc557613fc4613228565b5b613fd184828501613f13565b60408301525092915050565b6000613ff0613feb84613c5d565b61320d565b905080838252602082019050602084028301858111156140135761401261348f565b5b835b8181101561405a57803567ffffffffffffffff8111156140385761403761322d565b5b8086016140458982613f41565b85526020850194505050602081019050614015565b5050509392505050565b600082601f8301126140795761407861322d565b5b8135614089848260208601613fdd565b91505092915050565b600080604083850312156140a9576140a861309d565b5b60006140b7858286016130f0565b925050602083013567ffffffffffffffff8111156140d8576140d76130a2565b5b6140e485828601614064565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061413557607f821691505b602082108103614148576141476140ee565b5b50919050565b6000604083016000830151614166600086018261384a565b506020830151848203602086015261417e82826138a1565b9150508091505092915050565b600060208201905081810360008301526141a5818461414e565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006142168261342d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614248576142476141dc565b5b600182019050919050565b7f6f6e676f696e67207265636f7665727900000000000000000000000000000000600082015250565b6000614289601083613788565b915061429482614253565b602082019050919050565b600060208201905081810360008301526142b88161427c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006142f98261342d565b91506143048361342d565b925082820190508082111561431c5761431b6141dc565b5b92915050565b7f6e6f206f6e676f696e67207265636f7665727900000000000000000000000000600082015250565b6000614358601383613788565b915061436382614322565b602082019050919050565b600060208201905081810360008301526143878161434b565b9050919050565b7f6c6f636b696e6700000000000000000000000000000000000000000000000000600082015250565b60006143c4600783613788565b91506143cf8261438e565b602082019050919050565b600060208201905081810360008301526143f3816143b7565b9050919050565b614403816130c7565b82525050565b6000819050919050565b6000819050919050565b600061443861443361442e84614409565b614413565b61342d565b9050919050565b6144488161441d565b82525050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b600081546144818161411d565b61448b818661444e565b945060018216600081146144a657600181146144bc576144ef565b60ff1983168652811515602002860193506144ef565b6144c58561445f565b60005b838110156144e7578154818901526001820191506020810190506144c8565b808801955050505b50505092915050565b600060ff82169050919050565b600061452061451b61451684614409565b614413565b6144f8565b9050919050565b61453081614505565b82525050565b600060808201905061454b60008301876143fa565b614558602083018661443f565b818103604083015261456a8185614474565b90506145796060830184614527565b95945050505050565b61458b81613132565b811461459657600080fd5b50565b6000815190506145a881614582565b92915050565b6000602082840312156145c4576145c361309d565b5b60006145d284828501614599565b91505092915050565b60006060820190506145f060008301866143fa565b81810360208301526146028185614474565b90506146116040830184613c09565b949350505050565b7f756e656e61626c656420706f6c69637900000000000000000000000000000000600082015250565b600061464f601083613788565b915061465a82614619565b602082019050919050565b6000602082019050818103600083015261467e81614642565b9050919050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b60006146bb601183613788565b91506146c682614685565b602082019050919050565b600060208201905081810360008301526146ea816146ae565b9050919050565b60006146fc82613885565b614706818561444e565b9350614716818560208601613799565b61471f8161319c565b840191505092915050565b600060608201905061473f6000830186613c33565b818103602083015261475181856146f1565b9050818103604083015261476581846146f1565b9050949350505050565b7f6475706c69636174656420677572616469616e00000000000000000000000000600082015250565b60006147a5601383613788565b91506147b08261476f565b602082019050919050565b600060208201905081810360008301526147d481614798565b9050919050565b60006147e68261342d565b91506147f18361342d565b9250828203905081811115614809576148086141dc565b5b92915050565b600061481a82613917565b915061482583613917565b9250828201905067ffffffffffffffff811115614845576148446141dc565b5b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000604083016000830151848203600086015261489482826138da565b915050602083015184820360208601526148ae82826138a1565b9150508091505092915050565b60006148c78383614877565b905092915050565b6000602082019050919050565b60006148e78261484b565b6148f18185614856565b93508360208202850161490385614867565b8060005b8581101561493f578484038952815161492085826148bb565b945061492b836148cf565b925060208a01995050600181019050614907565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000614989838361392b565b60208301905092915050565b6000602082019050919050565b60006149ad82614951565b6149b7818561495c565b93506149c28361496d565b8060005b838110156149f35781516149da888261497d565b97506149e583614995565b9250506001810190506149c6565b5085935050505092915050565b60006040820190508181036000830152614a1a81856148dc565b90508181036020830152614a2e81846149a2565b90509392505050565b600081519050614a4681613cb5565b92915050565b60008060408385031215614a6357614a6261309d565b5b6000614a7185828601614599565b9250506020614a8285828601614a37565b9150509250929050565b7f6661696c6564207065726d697373696f6e730000000000000000000000000000600082015250565b6000614ac2601283613788565b9150614acd82614a8c565b602082019050919050565b60006020820190508181036000830152614af181614ab5565b9050919050565b7f7468726573686f6c6420756e6d61746368656400000000000000000000000000600082015250565b6000614b2e601383613788565b9150614b3982614af8565b602082019050919050565b60006020820190508181036000830152614b5d81614b21565b9050919050565b6000608082019050614b796000830187613c33565b614b8660208301866143fa565b8181036040830152614b9881856146f1565b9050614ba76060830184613c09565b95945050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000614bf1600283614bb0565b9150614bfc82614bbb565b600282019050919050565b6000819050919050565b614c22614c1d826133ca565b614c07565b82525050565b6000614c3382614be4565b9150614c3f8285614c11565b602082019150614c4f8284614c11565b6020820191508190509392505050565b6000608082019050614c7460008301876143fa565b614c81602083018661443f565b8181036040830152614c9381856146f1565b9050614ca26060830184614527565b95945050505050565b6000606082019050614cc060008301866143fa565b8181036020830152614cd281856146f1565b9050614ce16040830184613c09565b949350505050565b6000614cf48261314d565b9150614cff8361314d565b9250828201905065ffffffffffff811115614d1d57614d1c6141dc565b5b92915050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614d707fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614d33565b614d7a8683614d33565b95508019841693508086168417925050509392505050565b6000614dad614da8614da38461342d565b614413565b61342d565b9050919050565b6000819050919050565b614dc783614d92565b614ddb614dd382614db4565b848454614d40565b825550505050565b600090565b614df0614de3565b614dfb818484614dbe565b505050565b5b81811015614e1f57614e14600082614de8565b600181019050614e01565b5050565b601f821115614e6457614e358161445f565b614e3e84614d23565b81016020851015614e4d578190505b614e61614e5985614d23565b830182614e00565b50505b505050565b600082821c905092915050565b6000614e8760001984600802614e69565b1980831691505092915050565b6000614ea08383614e76565b9150826002028217905092915050565b614eb982613885565b67ffffffffffffffff811115614ed257614ed16131ad565b5b614edc825461411d565b614ee7828285614e23565b600060209050601f831160018114614f1a5760008415614f08578287015190505b614f128582614e94565b865550614f7a565b601f198416614f288661445f565b60005b82811015614f5057848901518255600182019150602085019450602081019050614f2b565b86831015614f6d5784890151614f69601f891682614e76565b8355505b6001600288020188555050505b505050505050565b6000606082019050614f976000830186613c33565b614fa460208301856143fa565b614fb16040830184613c09565b949350505050565b6000604082019050614fce60008301856143fa565b614fdb6020830184613c09565b9392505050565b6000614fed8261377d565b614ff78185614bb0565b9350615007818560208601613799565b80840191505092915050565b600061501f8284614fe2565b915081905092915050565b600061504561504061503b846130a7565b614413565b6130a7565b9050919050565b60006150578261502a565b9050919050565b60006150698261504c565b9050919050565b6150798161505e565b82525050565b600060a0820190506150946000830188613c33565b6150a16020830187613c33565b6150ae6040830186613c33565b6150bb6060830185613c09565b6150c86080830184615070565b9695505050505050565b7f496e76616c69642074696d650000000000000000000000000000000000000000600082015250565b6000615108600c83613788565b9150615113826150d2565b602082019050919050565b60006020820190508181036000830152615137816150fb565b9050919050565b7f6861736820756e6d617463686564000000000000000000000000000000000000600082015250565b6000615174600e83613788565b915061517f8261513e565b602082019050919050565b600060208201905081810360008301526151a381615167565b9050919050565b60006040820190506151bf6000830185613c33565b81810360208301526151d181846146f1565b90509392505050565b600081905092915050565b60006151f082613885565b6151fa81856151da565b935061520a818560208601613799565b80840191505092915050565b600061522282846151e5565b915081905092915050565b60008151905061523c816133d4565b92915050565b6000602082840312156152585761525761309d565b5b60006152668482850161522d565b91505092915050565b7f484153485f414c52454144595f45584953545300000000000000000000000000600082015250565b60006152a5601383613788565b91506152b08261526f565b602082019050919050565b600060208201905081810360008301526152d481615298565b9050919050565b6152e4816144f8565b82525050565b60006080820190506152ff6000830187613c33565b61530c60208301866152db565b6153196040830185613c33565b6153266060830184613c33565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220f418ff69bfcae7d9e69d67afc3e687ca79f4d88a3acefd0527c0ac36ce5f421764736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "GuardiansUpdated(address)": {
        "details": "Events for updating guardians, starting for recovery, executing recovery, and canceling recovery"
      }
    },
    "kind": "dev",
    "methods": {
      "domainSeparator()": {
        "returns": {
          "_0": "the bytes32 domainSeparator for EIP-712 signature"
        }
      },
      "executeRecovery(address)": {
        "details": "Execute recovery temporary state -> ownerKey rotation"
      },
      "isGuardian(address,(address,bytes))": {
        "details": "Get wallet recovery info, recovery config, check if an identity is a guardian, get the nonce of social recovery, and get the recovery status of the wallet"
      }
    },
    "stateVariables": {
      "NAME": {
        "details": "Return the domain separator name and version for signatures Also return the domainSeparator for EIP-712 signature"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "domainSeparator()": {
        "notice": "returns the domainSeparator for EIP-712 signature"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12234,
        "contract": "src/RecoveryModule.sol:RecoveryModule",
        "label": "walletRecoveryNonce",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12240,
        "contract": "src/RecoveryModule.sol:RecoveryModule",
        "label": "walletConfigs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_struct(RecoveryConfig)13432_storage)dyn_storage)"
      },
      {
        "astId": 12246,
        "contract": "src/RecoveryModule.sol:RecoveryModule",
        "label": "approvedRecords",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 12251,
        "contract": "src/RecoveryModule.sol:RecoveryModule",
        "label": "recoveryEntries",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(RecoveryEntry)12181_storage)"
      },
      {
        "astId": 12256,
        "contract": "src/RecoveryModule.sol:RecoveryModule",
        "label": "pendingConfigs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PendingConfig)13414_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RecoveryConfig)13432_storage)dyn_storage": {
        "base": "t_struct(RecoveryConfig)13432_storage",
        "encoding": "dynamic_array",
        "label": "struct RecoveryConfig[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ThresholdConfig)13392_storage)dyn_storage": {
        "base": "t_struct(ThresholdConfig)13392_storage",
        "encoding": "dynamic_array",
        "label": "struct ThresholdConfig[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(UpdateType)13406": {
        "encoding": "inplace",
        "label": "enum UpdateType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(RecoveryConfig)13432_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RecoveryConfig[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(RecoveryConfig)13432_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_address,t_struct(PendingConfig)13414_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PendingConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingConfig)13414_storage"
      },
      "t_mapping(t_address,t_struct(RecoveryEntry)12181_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RecoveryModule.RecoveryEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(RecoveryEntry)12181_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(GuardianInfo)13387_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GuardianInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GuardianInfo)13387_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(GuardianInfo)13387_storage": {
        "encoding": "inplace",
        "label": "struct GuardianInfo",
        "members": [
          {
            "astId": 13384,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "guardian",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Identity)13381_storage"
          },
          {
            "astId": 13386,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "property",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Identity)13381_storage": {
        "encoding": "inplace",
        "label": "struct Identity",
        "members": [
          {
            "astId": 13378,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "guardianVerifier",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13380,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "signer",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PendingConfig)13414_storage": {
        "encoding": "inplace",
        "label": "struct PendingConfig",
        "members": [
          {
            "astId": 13409,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "updateType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(UpdateType)13406"
          },
          {
            "astId": 13411,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "pendingUntil",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13413,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "configsHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RecoveryConfig)13432_storage": {
        "encoding": "inplace",
        "label": "struct RecoveryConfig",
        "members": [
          {
            "astId": 13416,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "enabled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13418,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "policyVerifier",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13422,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "identityHashs",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 13427,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "guardianInfos",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(GuardianInfo)13387_storage)"
          },
          {
            "astId": 13431,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "thresholdConfigs",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(ThresholdConfig)13392_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RecoveryEntry)12181_storage": {
        "encoding": "inplace",
        "label": "struct RecoveryModule.RecoveryEntry",
        "members": [
          {
            "astId": 12176,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 12178,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "executeAfter",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12180,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "nonce",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ThresholdConfig)13392_storage": {
        "encoding": "inplace",
        "label": "struct ThresholdConfig",
        "members": [
          {
            "astId": 13389,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "threshold",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 13391,
            "contract": "src/RecoveryModule.sol:RecoveryModule",
            "label": "lockPeriod",
            "offset": 8,
            "slot": "0",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}