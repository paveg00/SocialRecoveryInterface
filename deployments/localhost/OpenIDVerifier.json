{
  "address": "0x2bdCC0de6bE1f7D2ee689a0342D76F52E8EFABa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "ReadBytes32OutOfBounds",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "AddOpenIDAudience",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "DeleteOpenIDAudience",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "DeleteOpenIdPublicKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "UpdateOpenIDPublicKey",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "addOpenIDAudience",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_keys",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_publicKeys",
          "type": "bytes[]"
        }
      ],
      "name": "batchUpdateOpenIDPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "deleteOpenIDAudience",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "deleteOpenIDPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGuardianVerifierInfo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "getOpenIDPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "isAudienceValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signer",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "signers",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "isValidPermissions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signer",
          "type": "bytes"
        }
      ],
      "name": "isValidSigner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "signers",
          "type": "bytes[]"
        }
      ],
      "name": "isValidSigners",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "updateOpenIDPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "validateIDToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "succ",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "issHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "subHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "nonceHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc96f1467d5f38b11496a6faf124f5d155878c17d22a9734910cb673cc2883ad8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2bdCC0de6bE1f7D2ee689a0342D76F52E8EFABa3",
    "transactionIndex": 0,
    "gasUsed": "4414734",
    "logsBloom": "0x
    "blockHash": "0xf105c0afaaa92228f224f74a6eac89f2c8f02a9bd8c8a0ec3a18a436cd433282",
    "transactionHash": "0xc96f1467d5f38b11496a6faf124f5d155878c17d22a9734910cb673cc2883ad8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 57,
        "transactionHash": "0xc96f1467d5f38b11496a6faf124f5d155878c17d22a9734910cb673cc2883ad8",
        "address": "0x2bdCC0de6bE1f7D2ee689a0342D76F52E8EFABa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf105c0afaaa92228f224f74a6eac89f2c8f02a9bd8c8a0ec3a18a436cd433282"
      }
    ],
    "blockNumber": 57,
    "cumulativeGasUsed": "4414734",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "116b69c9a0be847a27c8485dfde19a9d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"ReadBytes32OutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"AddOpenIDAudience\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"DeleteOpenIDAudience\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"DeleteOpenIdPublicKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"UpdateOpenIDPublicKey\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"addOpenIDAudience\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_publicKeys\",\"type\":\"bytes[]\"}],\"name\":\"batchUpdateOpenIDPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteOpenIDAudience\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteOpenIDPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuardianVerifierInfo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getOpenIDPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"isAudienceValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signer\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"signers\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"isValidPermissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signer\",\"type\":\"bytes\"}],\"name\":\"isValidSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"signers\",\"type\":\"bytes[]\"}],\"name\":\"isValidSigners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateOpenIDPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"validateIDToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"succ\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"issHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nonceHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getGuardianVerifierInfo()\":{\"details\":\"Return supported signer key information, format, signature format, hash algorithm, etc. MAY TODO:using ERC-3668: ccip-read\"},\"isValidPermission(bytes32,bytes,bytes)\":{\"details\":\"Validate signature\"},\"isValidPermissions(bytes32,bytes[],bytes[])\":{\"details\":\"Validate signatures\"},\"isValidSigners(bytes[])\":{\"details\":\"Check if the signer key format is correct\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/verifier/openid/OpenIDVerifier.sol\":\"OpenIDVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"forge-std/console2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\n/// @dev The original console.sol uses `int` and `uint` for computing function selectors, but it should\\n/// use `int256` and `uint256`. This modified version fixes that. This version is recommended\\n/// over `console.sol` if you don't need compatibility with Hardhat as the logs will show up in\\n/// forge stack traces. If you do need compatibility with Hardhat, you must use `console.sol`.\\n/// Reference: https://github.com/NomicFoundation/hardhat/issues/2178\\nlibrary console2 {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _castLogPayloadViewToPure(\\n        function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) internal pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\\n    }\\n\\n    function _sendLogPayloadView(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, int256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,int256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\"},\"src/interfaces/IPermissionVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface for no-account type identity signature/proof verification\\n */\\ninterface IPermissionVerifier {\\n    /**\\n     * @dev Check if the signer key format is correct\\n     */\\n    function isValidSigners(bytes[] memory signers) external returns (bool);\\n\\n    /**\\n     * @dev Validate signature\\n     */\\n    function isValidPermission(\\n        bytes32 hash,\\n        bytes memory signer,\\n        bytes memory signature\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Validate signatures\\n     */\\n    function isValidPermissions(\\n        bytes32 hash,\\n        bytes[] memory signers,\\n        bytes[] memory signatures\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Return supported signer key information, format, signature format, hash algorithm, etc.\\n     * MAY TODO:using ERC-3668: ccip-read\\n     */\\n    function getGuardianVerifierInfo() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xb89bb87198f4b340d98a3b317efd18f61c777dc1a783dfa8b03fb8d8be6fd5e0\",\"license\":\"LGPL-3.0-only\"},\"src/libraries/LibBase64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary LibBase64 {\\n    bytes internal constant TABLE_DECODE =\\n        hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n        hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n        hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n        hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function decode(bytes calldata _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // read 4 characters\\n                dataPtr := add(dataPtr, 4)\\n                let input := mload(dataPtr)\\n\\n                // write 3 bytes\\n                let output := add(\\n                    add(\\n                        shl(\\n                            18,\\n                            and(\\n                                mload(add(tablePtr, and(shr(24, input), 0xFF))),\\n                                0xFF\\n                            )\\n                        ),\\n                        shl(\\n                            12,\\n                            and(\\n                                mload(add(tablePtr, and(shr(16, input), 0xFF))),\\n                                0xFF\\n                            )\\n                        )\\n                    ),\\n                    add(\\n                        shl(\\n                            6,\\n                            and(\\n                                mload(add(tablePtr, and(shr(8, input), 0xFF))),\\n                                0xFF\\n                            )\\n                        ),\\n                        and(mload(add(tablePtr, and(input, 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    bytes private constant base64urlchars =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\\\";\\n\\n    function urlEncode(\\n        bytes memory _str\\n    ) internal pure returns (string memory) {\\n        bytes memory _bs = _str;\\n        uint256 rem = _bs.length % 3;\\n\\n        uint256 res_length = ((_bs.length + 2) / 3) * 4 - ((3 - rem) % 3);\\n        bytes memory res = new bytes(res_length);\\n\\n        uint256 i = 0;\\n        uint256 j = 0;\\n\\n        for (; i + 3 <= _bs.length; i += 3) {\\n            (res[j], res[j + 1], res[j + 2], res[j + 3]) = encode3(\\n                uint8(_bs[i]),\\n                uint8(_bs[i + 1]),\\n                uint8(_bs[i + 2])\\n            );\\n\\n            j += 4;\\n        }\\n\\n        if (rem != 0) {\\n            uint8 la0 = uint8(_bs[_bs.length - rem]);\\n            uint8 la1 = 0;\\n\\n            if (rem == 2) {\\n                la1 = uint8(_bs[_bs.length - 1]);\\n            }\\n\\n            (bytes1 b0, bytes1 b1, bytes1 b2, ) = encode3(la0, la1, 0);\\n            res[j] = b0;\\n            res[j + 1] = b1;\\n            if (rem == 2) {\\n                res[j + 2] = b2;\\n            }\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function encode3(\\n        uint256 a0,\\n        uint256 a1,\\n        uint256 a2\\n    ) private pure returns (bytes1 b0, bytes1 b1, bytes1 b2, bytes1 b3) {\\n        uint256 n = (a0 << 16) | (a1 << 8) | a2;\\n\\n        uint256 c0 = (n >> 18) & 63;\\n        uint256 c1 = (n >> 12) & 63;\\n        uint256 c2 = (n >> 6) & 63;\\n        uint256 c3 = (n) & 63;\\n\\n        b0 = base64urlchars[c0];\\n        b1 = base64urlchars[c1];\\n        b2 = base64urlchars[c2];\\n        b3 = base64urlchars[c3];\\n    }\\n}\\n\",\"keccak256\":\"0x9e40d1bd8d97fe161954e71fb822a1cc73e9266e071609861660e8635e38aa91\",\"license\":\"MIT\"},\"src/libraries/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/* solhint-disable no-inline-assembly */\\n\\nlibrary LibBytes {\\n    using LibBytes for bytes;\\n\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    // Errors\\n    error ReadFirstUint16OutOfBounds(bytes _data);\\n    error ReadFirstUint8OutOfBounds(bytes _data);\\n    error ReadUint8Uint8OutOfBounds(bytes _data, uint256 _index);\\n    error ReadAddressOutOfBounds(bytes _data, uint256 _index);\\n    error ReadBytes32OutOfBounds(bytes _data, uint256 _index);\\n    error ReadUint16OutOfBounds(bytes _data, uint256 _index);\\n    error ReadBytesOutOfBounds(bytes _datam, uint256 _index, uint256 _length);\\n    error SplitInvalidNeedle();\\n\\n    /***********************************|\\n  |        Read Bytes Functions       |\\n  |__________________________________*/\\n\\n    /**\\n     * @dev Read firsts uint16 value.\\n     * @param data Byte array to be read.\\n     * @return a uint16 value of data at index zero.\\n     * @return newIndex Updated index after reading the values.\\n     */\\n    function readFirstUint16(\\n        bytes memory data\\n    ) internal pure returns (uint16 a, uint256 newIndex) {\\n        if (data.length < 2) revert ReadFirstUint16OutOfBounds(data);\\n        assembly {\\n            let word := mload(add(32, data))\\n            a := shr(240, word)\\n            newIndex := 2\\n        }\\n    }\\n\\n    function cReadFirstUint16(\\n        bytes calldata data\\n    ) internal pure returns (uint16 a, uint256 newIndex) {\\n        if (data.length < 2) revert ReadFirstUint16OutOfBounds(data);\\n        assembly {\\n            let word := calldataload(data.offset)\\n            a := shr(240, word)\\n            newIndex := 2\\n        }\\n    }\\n\\n    function cReadFirstUint8(\\n        bytes calldata data\\n    ) internal pure returns (uint8 a, uint256 newIndex) {\\n        if (data.length == 0) revert ReadFirstUint8OutOfBounds(data);\\n        assembly {\\n            let word := calldataload(data.offset)\\n            a := shr(248, word)\\n            newIndex := 1\\n        }\\n    }\\n\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    ) internal pure returns (bytes32 result) {\\n        // Arrays are prefixed by a 256 bit length parameter\\n        uint256 pos = index + 32;\\n\\n        if (b.length < pos) revert ReadBytes32OutOfBounds(b, index);\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, pos))\\n        }\\n        return result;\\n    }\\n\\n    function readBytesN(\\n        bytes memory b,\\n        uint256 index,\\n        uint32 length\\n    ) internal pure returns (bytes32 result) {\\n        // Arrays are prefixed by a 256 bit length parameter\\n        uint256 pos = index + 32;\\n\\n        if (b.length < pos) revert ReadBytes32OutOfBounds(b, index);\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, pos))\\n        }\\n\\n        uint256 offset = (32 - length) * 8;\\n        result = bytes32((result >> offset) << offset);\\n    }\\n\\n    function mcReadBytes32(\\n        bytes calldata data,\\n        uint256 index\\n    ) internal pure returns (bytes32 a) {\\n        assembly {\\n            a := calldataload(add(data.offset, index))\\n        }\\n    }\\n\\n    function readBytes66(\\n        bytes memory data,\\n        uint256 index\\n    ) internal pure returns (bytes memory a, uint256 newIndex) {\\n        a = new bytes(66);\\n        assembly {\\n            let offset := add(32, add(data, index))\\n            mstore(add(a, 32), mload(offset))\\n            mstore(add(a, 64), mload(add(offset, 32)))\\n            mstore(add(a, 66), mload(add(offset, 34)))\\n            newIndex := add(index, 66)\\n        }\\n        assert(newIndex > index);\\n        require(newIndex <= data.length, \\\"LibBytes#readBytes66: OUT_OF_BOUNDS\\\");\\n    }\\n\\n    function mcReadBytesN(\\n        bytes calldata data,\\n        uint256 index,\\n        uint256 length\\n    ) internal pure returns (bytes32 a) {\\n        uint256 ret;\\n        assembly {\\n            ret := calldataload(add(data.offset, index))\\n        }\\n        uint256 offset = (32 - length) * 8;\\n        a = bytes32((ret >> offset) << offset);\\n    }\\n\\n    function mcReadUint8(\\n        bytes calldata data,\\n        uint256 index\\n    ) internal pure returns (uint8 a) {\\n        assembly {\\n            let word := calldataload(add(data.offset, index))\\n            a := shr(248, word)\\n        }\\n    }\\n\\n    function cReadUint8Uint8(\\n        bytes calldata data,\\n        uint256 index\\n    ) internal pure returns (uint8 a, uint8 b, uint256 newIndex) {\\n        assembly {\\n            let word := calldataload(add(index, data.offset))\\n            a := shr(248, word)\\n            b := and(shr(240, word), 0xff)\\n            newIndex := add(index, 2)\\n        }\\n    }\\n\\n    function cReadAddress(\\n        bytes calldata data,\\n        uint256 index\\n    ) internal pure returns (address a, uint256 newIndex) {\\n        assembly {\\n            let word := calldataload(add(index, data.offset))\\n            a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n            newIndex := add(index, 20)\\n        }\\n    }\\n\\n    function cReadBytes4(\\n        bytes calldata data,\\n        uint256 index\\n    ) internal pure returns (bytes4 a, uint256 newIndex) {\\n        assembly {\\n            a := calldataload(add(index, data.offset))\\n            newIndex := add(index, 4)\\n        }\\n    }\\n\\n    function cReadUint16(\\n        bytes calldata data,\\n        uint256 index\\n    ) internal pure returns (uint16 a, uint256 newIndex) {\\n        assembly {\\n            let word := calldataload(add(index, data.offset))\\n            a := and(shr(240, word), 0xffff)\\n            newIndex := add(index, 2)\\n        }\\n    }\\n\\n    function cReadUint32(\\n        bytes calldata data,\\n        uint256 index\\n    ) internal pure returns (uint32 a, uint256 newIndex) {\\n        assembly {\\n            let word := calldataload(add(index, data.offset))\\n            a := and(shr(224, word), 0xffffffff)\\n            newIndex := add(index, 4)\\n        }\\n    }\\n\\n    function cReadUint128(\\n        bytes calldata data,\\n        uint256 index\\n    ) internal pure returns (uint128 a, uint256 newIndex) {\\n        assembly {\\n            let word := calldataload(add(index, data.offset))\\n            a := and(shr(128, word), 0xffffffffffffffffffffffffffffffff)\\n            newIndex := add(index, 16)\\n        }\\n    }\\n\\n    function mcReadUint256Array(\\n        bytes calldata data,\\n        uint256 index\\n    ) internal pure returns (uint256[] memory a, uint256 newIndex) {\\n        uint32 len;\\n        (len, newIndex) = data.cReadUint32(index);\\n        a = new uint256[](len);\\n        uint256 offset;\\n        for (uint256 i; i < len; i++) {\\n            offset += 32;\\n            assembly {\\n                mstore(add(a, offset), calldataload(add(data.offset, newIndex)))\\n            }\\n            newIndex += 32;\\n        }\\n    }\\n\\n    /**\\n     * @dev Convert a `uint32` to its ASCII `bytes32`\\n     */\\n    function uint32ToASSCIIBytes32(\\n        uint32 value\\n    ) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 digestCapacity;\\n            uint256 ret;\\n            while (true) {\\n                ret |= (((uint256(value) % 10) + 48) << (digestCapacity * 8));\\n                value /= 10;\\n                if (value == 0) break;\\n                ++digestCapacity;\\n            }\\n            return bytes32(ret << (22 * 8));\\n        }\\n    }\\n\\n    function toLower(bytes calldata bStr) internal pure returns (bytes memory) {\\n        bytes memory bLower = new bytes(bStr.length);\\n        for (uint256 i; i < bStr.length; i++) {\\n            // Uppercase character...\\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\n                // So we add 32 to make it lowercase\\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return bLower;\\n    }\\n\\n    function toLowerMemory(\\n        bytes memory bStr\\n    ) internal pure returns (bytes memory) {\\n        bytes memory bLower = new bytes(bStr.length);\\n        for (uint256 i; i < bStr.length; i++) {\\n            // Uppercase character...\\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\n                // So we add 32 to make it lowercase\\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return bLower;\\n    }\\n\\n    function toHex(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (bytes memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return buffer;\\n    }\\n\\n    function findBytes1(\\n        bytes calldata self,\\n        uint256 _index,\\n        bytes1 _needle\\n    ) internal pure returns (uint256 index) {\\n        for (index = _index; index < self.length; index++) {\\n            if (self[index] == _needle) {\\n                return index;\\n            }\\n        }\\n        revert SplitInvalidNeedle();\\n    }\\n\\n    function findBytes(\\n        bytes calldata self,\\n        uint256 _index,\\n        bytes calldata _needle\\n    ) internal pure returns (uint256 index) {\\n        uint256 selfLength = self.length;\\n        uint256 needleLength = _needle.length;\\n        for (index = _index; index < selfLength; index++) {\\n            uint256 innerIndex;\\n            for (innerIndex; innerIndex < needleLength; innerIndex++) {\\n                if (self[index + innerIndex] != _needle[innerIndex]) {\\n                    break;\\n                }\\n            }\\n            if (innerIndex == needleLength) {\\n                return index;\\n            }\\n        }\\n        revert SplitInvalidNeedle();\\n    }\\n}\\n\",\"keccak256\":\"0xc8c25169a204c984cc9449e7f6ab031c322cbf7cd1e7f0aba363c4385a2aeefc\",\"license\":\"BUSL-1.1\"},\"src/libraries/LibModexpPrecompile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nlibrary ModexpPrecompile {\\n    /**\\n     * @dev Computes (base ^ exponent) % modulus over big numbers.\\n     */\\n    function modexp(\\n        bytes memory base,\\n        bytes memory exponent,\\n        bytes memory modulus\\n    ) internal view returns (bool success, bytes memory output) {\\n        bytes memory input = abi.encodePacked(\\n            uint256(base.length),\\n            uint256(exponent.length),\\n            uint256(modulus.length),\\n            base,\\n            exponent,\\n            modulus\\n        );\\n\\n        output = new bytes(modulus.length);\\n\\n        assembly {\\n            success := staticcall(gas(), 5, add(input, 32), mload(input), add(output, 32), mload(modulus))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa84eefc24ed5913353360631a26736b827e295a00ef1c7dfa058a8d7693a57b8\",\"license\":\"MIT\"},\"src/libraries/LibRsa.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LibModexpPrecompile.sol\\\";\\nimport \\\"./LibBytes.sol\\\";\\n\\nlibrary LibRsa {\\n    using LibBytes for bytes;\\n\\n    function rsapkcs1Verify(\\n        bytes32 hash,\\n        bytes memory n,\\n        bytes memory e,\\n        bytes memory sig\\n    ) internal view returns (bool) {\\n        // Recover the message from the signature\\n        bool ok;\\n        bytes memory result;\\n        (ok, result) = ModexpPrecompile.modexp(sig, e, n);\\n\\n        // Verify it ends with the hash of our data\\n        return ok && hash == result.readBytes32(result.length - 32);\\n    }\\n}\\n\",\"keccak256\":\"0xe5120a9e9327809b3212aca4c6eaf634209a581a681e9b2ba06155c73f1f8b23\",\"license\":\"MIT\"},\"src/verifier/openid/AudManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AudManager is Ownable {\\n    event AddOpenIDAudience(bytes32 _key);\\n    event DeleteOpenIDAudience(bytes32 _key);\\n\\n    /**\\n     * openIDAudience: keccak256(issuser + audience) => is valid\\n     */\\n    mapping(bytes32 => bool) openIDAudience;\\n\\n    function isAudienceValid(bytes32 _key) public view returns (bool isValid) {\\n        isValid = openIDAudience[_key];\\n    }\\n\\n    function addOpenIDAudience(bytes32 _key) external onlyOwner {\\n        openIDAudience[_key] = true;\\n        emit AddOpenIDAudience(_key);\\n    }\\n\\n    function deleteOpenIDAudience(bytes32 _key) external onlyOwner {\\n        delete openIDAudience[_key];\\n        emit DeleteOpenIDAudience(_key);\\n    }\\n}\\n\",\"keccak256\":\"0x8d4664a497c87a0e274d1d50b166c8b74395f8e1ce8c9c44d6953319bd28b429\",\"license\":\"LGPL-3.0-only\"},\"src/verifier/openid/OpenIDKeyManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OpenIDKeyManager is Ownable {\\n    event UpdateOpenIDPublicKey(bytes32 _key, bytes _publicKey);\\n    event DeleteOpenIdPublicKey(bytes32 _key);\\n\\n    /**\\n    /**\\n     * openIDPublicKey: kecaak256(issuser + key id) => public key\\n     */\\n    mapping(bytes32 => bytes) openIDPublicKey;\\n\\n    function getOpenIDPublicKey(\\n        bytes32 _key\\n    ) public view returns (bytes memory publicKey) {\\n        publicKey = openIDPublicKey[_key];\\n    }\\n\\n    function updateOpenIDPublicKey(\\n        bytes32 _key,\\n        bytes calldata _publicKey\\n    ) external onlyOwner {\\n        openIDPublicKey[_key] = _publicKey;\\n        emit UpdateOpenIDPublicKey(_key, _publicKey);\\n    }\\n\\n    function batchUpdateOpenIDPublicKey(\\n        bytes32[] calldata _keys,\\n        bytes[] calldata _publicKeys\\n    ) external onlyOwner {\\n        uint256 length = _keys.length;\\n        require(\\n            length == _publicKeys.length,\\n            \\\"batchUpdateOpenIDPublicKey: INVALID_LENGTH\\\"\\n        );\\n\\n        for (uint256 i; i < length; i++) {\\n            bytes32 key = _keys[i];\\n            bytes calldata publicKey = _publicKeys[i];\\n            openIDPublicKey[key] = publicKey;\\n            emit UpdateOpenIDPublicKey(key, publicKey);\\n        }\\n    }\\n\\n    function deleteOpenIDPublicKey(bytes32 _key) external onlyOwner {\\n        delete openIDPublicKey[_key];\\n        emit DeleteOpenIdPublicKey(_key);\\n    }\\n}\\n\",\"keccak256\":\"0x3c70aeb71abc72ba5f9b2c34ca702750a3e0c9a1eb5e36065f3fedf179a57b7d\",\"license\":\"LGPL-3.0-only\"},\"src/verifier/openid/OpenIDVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.12;\\n\\nimport \\\"../../libraries/LibRsa.sol\\\";\\nimport \\\"../../libraries/LibBytes.sol\\\";\\nimport \\\"../../libraries/LibBase64.sol\\\";\\nimport \\\"../../interfaces/IPermissionVerifier.sol\\\";\\n\\nimport \\\"./AudManager.sol\\\";\\nimport \\\"./OpenIDKeyManager.sol\\\";\\nimport \\\"forge-std/console2.sol\\\";\\n\\ncontract OpenIDVerifier is OpenIDKeyManager, AudManager, IPermissionVerifier {\\n    using LibBytes for bytes;\\n\\n    enum OpenIDParamsIndex {\\n        issLeftIndex,\\n        issRightIndex,\\n        kidLeftIndex,\\n        kidRightIndex,\\n        subLeftIndex,\\n        subRightIndex,\\n        audLeftIndex,\\n        audRightIndex,\\n        nonceLeftIndex,\\n        iatLeftIndex,\\n        expLeftIndex\\n    }\\n    uint256 constant OpenIDParamsIndexNum = 11;\\n\\n    function _validateTimestamp(\\n        uint256 _index,\\n        bytes calldata _data,\\n        bytes calldata _payload\\n    ) private view {\\n        bytes calldata iat;\\n        {\\n            uint32 iatLeftIndex;\\n            (iatLeftIndex, ) = _data.cReadUint32(\\n                uint256(OpenIDParamsIndex.iatLeftIndex) * 4 + _index\\n            );\\n\\n            require(\\n                bytes32(_payload[iatLeftIndex - 6:iatLeftIndex]) ==\\n                    bytes32('\\\"iat\\\":'),\\n                \\\"_validateTimestamp: INVALID_IAT\\\"\\n            );\\n            iat = _payload[iatLeftIndex:iatLeftIndex + 10];\\n        }\\n\\n        bytes calldata exp;\\n        {\\n            uint32 expLeftIndex;\\n            (expLeftIndex, ) = _data.cReadUint32(\\n                uint256(OpenIDParamsIndex.expLeftIndex) * 4 + _index\\n            );\\n\\n            require(\\n                bytes32(_payload[expLeftIndex - 6:expLeftIndex]) ==\\n                    bytes32('\\\"exp\\\":'),\\n                \\\"_validateTimestamp: INVALID_EXP\\\"\\n            );\\n            exp = _payload[expLeftIndex:expLeftIndex + 10];\\n        }\\n\\n        bytes32 timestamp = LibBytes.uint32ToASSCIIBytes32(\\n            uint32(block.timestamp)\\n        );\\n        console2.log(\\\"Now\\\");\\n        console2.logBytes32(timestamp);\\n        console2.log(block.timestamp);\\n        console2.logBytes32(bytes32(iat));\\n\\n        require(\\n            timestamp < bytes32(exp),\\n            \\\"_validateTimestamp: INVALID_TIMESTAMP exp\\\"\\n        );\\n        require(\\n            timestamp > bytes32(iat),\\n            \\\"_validateTimestamp: INVALID_TIMESTAMP iat\\\"\\n        );\\n\\n    }\\n\\n    function validateIDToken(\\n        uint256 _index,\\n        bytes calldata _data\\n    )\\n        public\\n        view\\n        returns (\\n            bool succ,\\n            uint256 index,\\n            bytes32 issHash,\\n            bytes32 subHash,\\n            bytes32 nonceHash\\n        )\\n    {\\n        bytes calldata header;\\n        bytes calldata payload;\\n        bytes calldata signature;\\n        {\\n            index = OpenIDParamsIndexNum * 4 + _index;\\n            uint32 len;\\n            (len, index) = _data.cReadUint32(index);\\n            header = _data[index:index + len];\\n            index += len;\\n            (len, index) = _data.cReadUint32(index);\\n            payload = _data[index:index + len];\\n            index += len;\\n            (len, index) = _data.cReadUint32(index);\\n            signature = _data[index:index + len];\\n            index += len;\\n        }\\n\\n        console2.log(\\\"Header\\\");\\n        console2.logBytes(header);\\n        console2.log(\\\"payload\\\");\\n        console2.logBytes(payload);\\n        console2.log(\\\"signature\\\");\\n        console2.logBytes(signature);\\n\\n        bytes memory publicKey;\\n        (issHash, publicKey) = _getPublicKeyAndIssHash(\\n            _index,\\n            _data,\\n            header,\\n            payload\\n        );\\n\\n        _validateTimestamp(_index, _data, payload);\\n\\n        succ = LibRsa.rsapkcs1Verify(\\n            sha256(\\n                abi.encodePacked(\\n                    LibBase64.urlEncode(header),\\n                    \\\".\\\",\\n                    LibBase64.urlEncode(payload)\\n                )\\n            ),\\n            publicKey,\\n            hex\\\"010001\\\",\\n            signature\\n        );\\n\\n        nonceHash = keccak256(_getNonce(_index, _data, payload));\\n\\n        subHash = keccak256(_getSub(_index, _data, payload));\\n    }\\n\\n    function _getNonce(\\n        uint256 _index,\\n        bytes calldata _data,\\n        bytes calldata _payload\\n    ) internal pure returns (bytes calldata nonce) {\\n        uint32 nonceLeftIndex;\\n        (nonceLeftIndex, ) = _data.cReadUint32(\\n            uint256(OpenIDParamsIndex.nonceLeftIndex) * 4 + _index\\n        );\\n\\n        require(\\n            bytes32(_payload[nonceLeftIndex - 9:nonceLeftIndex]) ==\\n                bytes32('\\\"nonce\\\":\\\"'),\\n            \\\"_getNonce: INVALID_NONCE\\\"\\n        );\\n        nonce = _payload[nonceLeftIndex:nonceLeftIndex + 66];\\n    }\\n\\n    function _getSub(\\n        uint256 _index,\\n        bytes calldata _data,\\n        bytes calldata _payload\\n    ) internal pure returns (bytes calldata sub) {\\n        uint32 subLeftIndex;\\n        (subLeftIndex, ) = _data.cReadUint32(\\n            uint256(OpenIDParamsIndex.subLeftIndex) * 4 + _index\\n        );\\n        require(\\n            bytes7(_payload[subLeftIndex - 7:subLeftIndex]) ==\\n                bytes7('\\\"sub\\\":\\\"'),\\n            \\\"_getSub: INVALID_SUB_LEFT\\\"\\n        );\\n\\n        uint32 subRightIndex;\\n        (subRightIndex, ) = _data.cReadUint32(\\n            uint256(OpenIDParamsIndex.subRightIndex) * 4 + _index\\n        );\\n        bytes2 suffix = bytes2(_payload[subRightIndex:subRightIndex + 2]);\\n        require(\\n            suffix == bytes2('\\\",') || suffix == bytes2('\\\"}'),\\n            \\\"_getSub: INVALID_SUB_RIGHT\\\"\\n        );\\n\\n        sub = _payload[subLeftIndex:subRightIndex];\\n    }\\n\\n    function _getPublicKeyAndIssHash(\\n        uint256 _index,\\n        bytes calldata _data,\\n        bytes calldata _header,\\n        bytes calldata _payload\\n    ) private view returns (bytes32 issHash, bytes memory publicKey) {\\n        bytes calldata iss = _getIss(_index, _data, _payload);\\n        issHash = keccak256(iss);\\n\\n        bytes calldata aud = _getAud(_index, _data, _payload);\\n        require(\\n            isAudienceValid(keccak256(abi.encodePacked(iss, aud))),\\n            \\\"_getPublicKeyAndIssHash: INVALID_AUD\\\"\\n        );\\n\\n        bytes memory kid = _getKid(_index, _data, _header);\\n        publicKey = getOpenIDPublicKey(keccak256(abi.encodePacked(iss, kid)));\\n        require(\\n            publicKey.length > 0,\\n            \\\"_getPublicKeyAndIssHash: INVALID_PUB_KEY\\\"\\n        );\\n    }\\n\\n    function _getIss(\\n        uint256 _index,\\n        bytes calldata _data,\\n        bytes calldata _payload\\n    ) internal pure returns (bytes calldata iss) {\\n        uint32 issLeftIndex;\\n        (issLeftIndex, ) = _data.cReadUint32(\\n            uint256(OpenIDParamsIndex.issLeftIndex) * 4 + _index\\n        );\\n        require(\\n            bytes7(_payload[issLeftIndex - 7:issLeftIndex]) ==\\n                bytes7('\\\"iss\\\":\\\"'),\\n            \\\"_getIss: INVALID_ISS_LEFT\\\"\\n        );\\n\\n        uint32 issRightIndex;\\n        (issRightIndex, ) = _data.cReadUint32(\\n            uint256(OpenIDParamsIndex.issRightIndex) * 4 + _index\\n        );\\n        bytes2 suffix = bytes2(_payload[issRightIndex:issRightIndex + 2]);\\n        require(\\n            suffix == bytes2('\\\",') || suffix == bytes2('\\\"}'),\\n            \\\"_getIss: INVALID_ISS_RIGHT\\\"\\n        );\\n\\n        iss = _payload[issLeftIndex:issRightIndex];\\n    }\\n\\n    function _getKid(\\n        uint256 _index,\\n        bytes calldata _data,\\n        bytes calldata _header\\n    ) internal pure returns (bytes calldata kid) {\\n        uint32 kidLeftIndex;\\n        (kidLeftIndex, ) = _data.cReadUint32(\\n            uint256(OpenIDParamsIndex.kidLeftIndex) * 4 + _index\\n        );\\n        require(\\n            bytes7(_header[kidLeftIndex - 7:kidLeftIndex]) == bytes7('\\\"kid\\\":\\\"'),\\n            \\\"_getKid: INVALID_KID_LEFT\\\"\\n        );\\n\\n        uint32 kidRightIndex;\\n        (kidRightIndex, ) = _data.cReadUint32(\\n            uint256(OpenIDParamsIndex.kidRightIndex) * 4 + _index\\n        );\\n        bytes2 suffix = bytes2(_header[kidRightIndex:kidRightIndex + 2]);\\n        require(\\n            suffix == bytes2('\\\",') || suffix == bytes2('\\\"}'),\\n            \\\"_getKid: INVALID_KID_RIGHT\\\"\\n        );\\n\\n        kid = _header[kidLeftIndex:kidRightIndex];\\n    }\\n\\n    function _getAud(\\n        uint256 _index,\\n        bytes calldata _data,\\n        bytes calldata _payload\\n    ) internal pure returns (bytes calldata aud) {\\n        uint32 audLeftIndex;\\n        (audLeftIndex, ) = _data.cReadUint32(\\n            uint256(OpenIDParamsIndex.audLeftIndex) * 4 + _index\\n        );\\n        require(\\n            bytes7(_payload[audLeftIndex - 7:audLeftIndex]) ==\\n                bytes7('\\\"aud\\\":\\\"'),\\n            \\\"_getAud: INVALID_AUD_LEFT\\\"\\n        );\\n\\n        uint32 audRightIndex;\\n        (audRightIndex, ) = _data.cReadUint32(\\n            uint256(OpenIDParamsIndex.audRightIndex) * 4 + _index\\n        );\\n        bytes2 suffix = bytes2(_payload[audRightIndex:audRightIndex + 2]);\\n        require(\\n            suffix == bytes2('\\\",') || suffix == bytes2('\\\"}'),\\n            \\\"_getAud: INVALID_AUD_RIGHT\\\"\\n        );\\n\\n        aud = _payload[audLeftIndex:audRightIndex];\\n    }\\n\\n    function isValidSigner(bytes memory signer) public pure returns (bool) {\\n        if (signer.length == 32) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Check if the signer key format is correct\\n     */\\n    function isValidSigners(\\n        bytes[] memory signers\\n    ) external pure returns (bool) {\\n        for (uint256 i = 0; i < signers.length; i++) {\\n            bool succ = isValidSigner(signers[i]);\\n            if (!succ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Validate signature\\n     */\\n    function isValidPermission(\\n        bytes32 hash,\\n        bytes calldata signer,\\n        bytes calldata signature\\n    ) public view returns (bool) {\\n        (\\n            bool succ,\\n            ,\\n            bytes32 issHash,\\n            bytes32 subHash,\\n            bytes32 nonceHash\\n        ) = validateIDToken(0, signature);\\n        require(succ, \\\"INVALID_TOKEN\\\");\\n\\n        console2.log(\\\"User validation start\\\");\\n        console2.logBytes(LibBytes.toHex(uint256(hash), 32));\\n        console2.logBytes32(nonceHash);\\n        console2.logBytes32(hash);\\n        \\n        require(\\n            keccak256((LibBytes.toHex(uint256(hash), 32))) == nonceHash,\\n            \\\"INVALID_NONCE_HASH\\\"\\n        );\\n\\n        bytes32 openid_key = keccak256(abi.encodePacked(issHash, subHash));\\n        require(\\n            openid_key == LibBytes.mcReadBytes32(signer, 0),\\n            \\\"INVALID_SIGNER\\\"\\n        );\\n\\n        console2.log(\\\"User validation end\\\");\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Validate signatures\\n     */\\n    function isValidPermissions(\\n        bytes32 hash,\\n        bytes[] calldata signers,\\n        bytes[] calldata signatures\\n    ) public view returns (bool) {\\n        require(signers.length == signatures.length, \\\"invalid args\\\");\\n\\n        for (uint256 i = 0; i < signers.length; i++) {\\n            bool succ = isValidPermission(hash, signers[i], signatures[i]);\\n            if (!succ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Return supported signer key information, format, signature format, hash algorithm, etc.\\n     * MAY TODO:using ERC-3668: ccip-read\\n     */\\n    function getGuardianVerifierInfo()\\n        external\\n        view\\n        returns (bytes memory metadata)\\n    {}\\n}\\n\",\"keccak256\":\"0x68f8d3b88e120d7fe03a3ed8a44a26b2db03e2d83710d81e58c879b5f490951c\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b614ecd80620001146000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806389c18fb011610097578063f2fde38b11610066578063f2fde38b146102af578063f80f8937146102cb578063f8a1d6a1146102e7578063f9da50511461031757610100565b806389c18fb0146102155780638da5cb5b14610245578063b785453414610263578063f22b68db1461029357610100565b80635419c5b2116100d35780635419c5b21461018b57806370043ea0146101bf578063710a5b3c146101ef578063715018a61461020b57610100565b8063295f3f741461010557806337517b79146101235780633d0e4178146101535780633ed83b641461016f575b600080fd5b61010d610347565b60405161011a9190612f94565b60405180910390f35b61013d600480360381019061013891906130ff565b61034c565b60405161014a9190613163565b60405180910390f35b61016d600480360381019061016891906131b4565b61036a565b005b61018960048036038101906101849190613241565b6103cf565b005b6101a560048036038101906101a091906132d7565b61043a565b6040516101b6959493929190613355565b60405180910390f35b6101d960048036038101906101d49190613489565b610923565b6040516101e69190613163565b60405180910390f35b6102096004803603810190610204919061357e565b61098a565b005b610213610ab0565b005b61022f600480360381019061022a91906135ff565b610ac4565b60405161023c9190613163565b60405180910390f35b61024d610ca7565b60405161025a91906136d5565b60405180910390f35b61027d600480360381019061027891906131b4565b610cd0565b60405161028a9190612f94565b60405180910390f35b6102ad60048036038101906102a891906131b4565b610d75565b005b6102c960048036038101906102c4919061371c565b610dd6565b005b6102e560048036038101906102e091906131b4565b610e59565b005b61030160048036038101906102fc91906131b4565b610ec7565b60405161030e9190613163565b60405180910390f35b610331600480360381019061032c9190613749565b610ef1565b60405161033e9190613163565b60405180910390f35b606090565b600060208251036103605760019050610365565b600090505b919050565b610372610fd3565b6002600082815260200190815260200160002060006101000a81549060ff02191690557f5a5c485156cdc63d427984d2c9b81bd8ae5d817ded95016818c43120c93fbd6d816040516103c491906137de565b60405180910390a150565b6103d7610fd3565b81816001600086815260200190815260200160002091826103f9929190613a10565b507f09c7228183e89663fa47ccbf317d3ac5e228a62848b5c29017eb05cb1a7224bc83838360405161042d93929190613b0d565b60405180910390a1505050565b60008060008060003660003660003660008d6004600b61045a9190613b6e565b6104649190613bb0565b9950600061047d8b8f8f6110519290919263ffffffff16565b809c5081925050508d8d8c908363ffffffff168e61049b9190613bb0565b926104a893929190613bee565b965096508063ffffffff168b6104be9190613bb0565b9a506104d58b8f8f6110519290919263ffffffff16565b809c5081925050508d8d8c908363ffffffff168e6104f39190613bb0565b9261050093929190613bee565b945094508063ffffffff168b6105169190613bb0565b9a5061052d8b8f8f6110519290919263ffffffff16565b809c5081925050508d8d8c908363ffffffff168e61054b9190613bb0565b9261055893929190613bee565b925092508063ffffffff168b61056e9190613bb0565b9a50506105af6040518060400160405280600681526020017f4865616465720000000000000000000000000000000000000000000000000000815250611073565b6105fc86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061110c565b61063a6040518060400160405280600781526020017f7061796c6f616400000000000000000000000000000000000000000000000000815250611073565b61068784848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061110c565b6106c56040518060400160405280600981526020017f7369676e61747572650000000000000000000000000000000000000000000000815250611073565b61071282828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061110c565b60606107238f8f8f8a8a8a8a6111a5565b809250819b5050506107388f8f8f888861133d565b6108c5600261078a89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611670565b6107d788888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611670565b6040516020016107e8929190613cbc565b6040516020818303038152906040526040516108049190613d27565b602060405180830381855afa158015610821573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906108449190613d53565b826040518060400160405280600381526020017f010001000000000000000000000000000000000000000000000000000000000081525086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611aa2565b9b506108d48f8f8f8888611af1565b6040516108e2929190613da5565b604051809103902097506108f98f8f8f8888611c08565b604051610907929190613da5565b6040518091039020985050505050505050939792965093509350565b600080600090505b825181101561097f57600061095984838151811061094c5761094b613dbe565b5b602002602001015161034c565b90508061096b57600092505050610985565b50808061097790613ded565b91505061092b565b50600190505b919050565b610992610fd3565b60008484905090508282905081146109df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d690613eb8565b60405180910390fd5b60005b81811015610aa85760008686838181106109ff576109fe613dbe565b5b905060200201359050366000868685818110610a1e57610a1d613dbe565b5b9050602002810190610a309190613ee7565b915091508181600160008681526020019081526020016000209182610a56929190613a10565b507f09c7228183e89663fa47ccbf317d3ac5e228a62848b5c29017eb05cb1a7224bc838383604051610a8a93929190613b0d565b60405180910390a15050508080610aa090613ded565b9150506109e2565b505050505050565b610ab8610fd3565b610ac26000611edb565b565b6000806000806000610ad86000888861043a565b94509450945050935083610b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1890613f96565b60405180910390fd5b610b5f6040518060400160405280601581526020017f557365722076616c69646174696f6e2073746172740000000000000000000000815250611073565b610b75610b708b60001c6020611f9f565b61110c565b610b7e816121db565b610b878a6121db565b80610b968b60001c6020611f9f565b8051906020012014610bdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd490614002565b60405180910390fd5b60008383604051602001610bf2929190614043565b604051602081830303815290604052805190602001209050610c168a8a6000612274565b8114610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4e906140bb565b60405180910390fd5b610c956040518060400160405280601381526020017f557365722076616c69646174696f6e20656e6400000000000000000000000000815250611073565b60019550505050505095945050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600160008381526020019081526020016000208054610cf090613833565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1c90613833565b8015610d695780601f10610d3e57610100808354040283529160200191610d69565b820191906000526020600020905b815481529060010190602001808311610d4c57829003601f168201915b50505050509050919050565b610d7d610fd3565b600160008281526020019081526020016000206000610d9c9190612e9d565b7f2dcad5593eade66ba317c839f2c7cd4b40bf9348055df767870cc43eb955e99f81604051610dcb91906137de565b60405180910390a150565b610dde610fd3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e449061414d565b60405180910390fd5b610e5681611edb565b50565b610e61610fd3565b60016002600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fac3cfe69fe75d1ba90e2d1259e5fc2aded0b228ca8b387e0985454d2a58d5ef481604051610ebc91906137de565b60405180910390a150565b60006002600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000828290508585905014610f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f32906141b9565b60405180910390fd5b60005b85859050811015610fc4576000610f9e88888885818110610f6257610f61613dbe565b5b9050602002810190610f749190613ee7565b888887818110610f8757610f86613dbe565b5b9050602002810190610f999190613ee7565b610ac4565b905080610fb057600092505050610fca565b508080610fbc90613ded565b915050610f3e565b50600190505b95945050505050565b610fdb612283565b73ffffffffffffffffffffffffffffffffffffffff16610ff9610ca7565b73ffffffffffffffffffffffffffffffffffffffff161461104f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104690614225565b60405180910390fd5b565b6000808483013563ffffffff8160e01c16925060048401915050935093915050565b61110981604051602401611087919061427e565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061228b565b50565b6111a2816040516024016111209190612f94565b6040516020818303038152906040527f0be77f56000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061228b565b50565b600060603660006111b98b8b8b89896122a5565b9150915081816040516111cd929190613da5565b604051809103902093503660006111e78d8d8d8b8b612579565b915091506112208484848460405160200161120594939291906142a0565b60405160208183030381529060405280519060200120610ec7565b61125f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112569061433a565b60405180910390fd5b600061126e8e8e8e8e8e61284d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506112e68585836040516020016112cb9392919061435a565b60405160208183030381529060405280519060200120610cd0565b9550600086511161132c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611323906143f2565b60405180910390fd5b505050505097509795505050505050565b366000806113808860046009600a81111561135b5761135a614412565b5b6113659190613b6e565b61136f9190613bb0565b88886110519290919263ffffffff16565b50809150507f22696174223a000000000000000000000000000000000000000000000000000085856006846113b59190614451565b63ffffffff16908463ffffffff16926113d093929190613bee565b906113db9190614489565b1461141b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141290614534565b60405180910390fd5b84848263ffffffff1690600a846114329190614554565b63ffffffff169261144593929190613bee565b92509250503660008061148c8a6004600a8081111561146757611466614412565b5b6114719190613b6e565b61147b9190613bb0565b8a8a6110519290919263ffffffff16565b50809150507f22657870223a000000000000000000000000000000000000000000000000000087876006846114c19190614451565b63ffffffff16908463ffffffff16926114dc93929190613bee565b906114e79190614489565b14611527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151e906145d8565b60405180910390fd5b86868263ffffffff1690600a8461153e9190614554565b63ffffffff169261155193929190613bee565b9250925050600061156142612b21565b90506115a16040518060400160405280600381526020017f4e6f770000000000000000000000000000000000000000000000000000000000815250611073565b6115aa816121db565b6115b342612b98565b6115c88585906115c39190614489565b6121db565b8282906115d59190614489565b8110611616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160d9061466a565b60405180910390fd5b8484906116239190614489565b8111611664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165b906146fc565b60405180910390fd5b50505050505050505050565b60606000829050600060038251611687919061474b565b90506000600382600361169a919061477c565b6116a4919061474b565b60046003600286516116b69190613bb0565b6116c091906147b0565b6116ca9190613b6e565b6116d4919061477c565b905060008167ffffffffffffffff8111156116f2576116f1612fd4565b5b6040519080825280601f01601f1916602001820160405280156117245781602001600182028036833780820191505090505b5090506000805b855160038361173a9190613bb0565b11611912576117cb86838151811061175557611754613dbe565b5b602001015160f81c60f81b60f81c60ff16876001856117749190613bb0565b8151811061178557611784613dbe565b5b602001015160f81c60f81b60f81c60ff16886002866117a49190613bb0565b815181106117b5576117b4613dbe565b5b602001015160f81c60f81b60f81c60ff16612c31565b8685815181106117de576117dd613dbe565b5b60200101876001876117f09190613bb0565b8151811061180157611800613dbe565b5b60200101886002886118139190613bb0565b8151811061182457611823613dbe565b5b60200101896003896118369190613bb0565b8151811061184757611846613dbe565b5b60200101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660001a9053847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660001a9053847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660001a9053847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660001a9053505050506004816118fc9190613bb0565b905060038261190b9190613bb0565b915061172b565b60008514611a945760008686885161192a919061477c565b8151811061193b5761193a613dbe565b5b602001015160f81c60f81b60f81c9050600060028703611986578760018951611964919061477c565b8151811061197557611974613dbe565b5b602001015160f81c60f81b60f81c90505b600080600061199d8560ff168560ff166000612c31565b50925092509250828887815181106119b8576119b7613dbe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081886001886119f69190613bb0565b81518110611a0757611a06613dbe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060028a03611a8e578088600288611a4d9190613bb0565b81518110611a5e57611a5d613dbe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b50505050505b829650505050505050919050565b6000806060611ab2848688612d62565b8092508193505050818015611ae55750611ae260208251611ad3919061477c565b82612e0290919063ffffffff16565b87145b92505050949350505050565b36600080611b348860046008600a811115611b0f57611b0e614412565b5b611b199190613b6e565b611b239190613bb0565b88886110519290919263ffffffff16565b50809150507f226e6f6e6365223a2200000000000000000000000000000000000000000000008585600984611b699190614451565b63ffffffff16908463ffffffff1692611b8493929190613bee565b90611b8f9190614489565b14611bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc69061482d565b60405180910390fd5b84848263ffffffff1690604284611be69190614554565b63ffffffff1692611bf993929190613bee565b92509250509550959350505050565b36600080611c4a88600480600a811115611c2557611c24614412565b5b611c2f9190613b6e565b611c399190613bb0565b88886110519290919263ffffffff16565b50809150507f22737562223a220000000000000000000000000000000000000000000000000078ffffffffffffffffffffffffffffffffffffffffffffffffff19168585600784611c9b9190614451565b63ffffffff16908463ffffffff1692611cb693929190613bee565b90611cc19190614879565b78ffffffffffffffffffffffffffffffffffffffffffffffffff191614611d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1490614924565b60405180910390fd5b6000611d5e8960046005600a811115611d3957611d38614412565b5b611d439190613b6e565b611d4d9190613bb0565b89896110519290919263ffffffff16565b5080915050600086868363ffffffff1690600285611d7c9190614554565b63ffffffff1692611d8f93929190613bee565b90611d9a9190614970565b90507f222c0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611e6d57507f227d0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea390614a1b565b60405180910390fd5b86868463ffffffff16908463ffffffff1692611eca93929190613bee565b945094505050509550959350505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060006002836002611fb29190613b6e565b611fbc9190613bb0565b67ffffffffffffffff811115611fd557611fd4612fd4565b5b6040519080825280601f01601f1916602001820160405280156120075781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061203f5761203e613dbe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106120a3576120a2613dbe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026120e39190613b6e565b6120ed9190613bb0565b90505b600181111561218d577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061212f5761212e613dbe565b5b1a60f81b82828151811061214657612145613dbe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061218690614a3b565b90506120f0565b50600084146121d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c890614ab0565b60405180910390fd5b8091505092915050565b612271816040516024016121ef91906137de565b6040516020818303038152906040527f27b7cf85000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061228b565b50565b60008184013590509392505050565b600033905090565b6122a28161229a612e69612e92565b63ffffffff16565b50565b366000806122e88860046000600a8111156122c3576122c2614412565b5b6122cd9190613b6e565b6122d79190613bb0565b88886110519290919263ffffffff16565b50809150507f22697373223a220000000000000000000000000000000000000000000000000078ffffffffffffffffffffffffffffffffffffffffffffffffff191685856007846123399190614451565b63ffffffff16908463ffffffff169261235493929190613bee565b9061235f9190614879565b78ffffffffffffffffffffffffffffffffffffffffffffffffff1916146123bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b290614b1c565b60405180910390fd5b60006123fc8960046001600a8111156123d7576123d6614412565b5b6123e19190613b6e565b6123eb9190613bb0565b89896110519290919263ffffffff16565b5080915050600086868363ffffffff169060028561241a9190614554565b63ffffffff169261242d93929190613bee565b906124389190614970565b90507f222c0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061250b57507f227d0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61254a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254190614b88565b60405180910390fd5b86868463ffffffff16908463ffffffff169261256893929190613bee565b945094505050509550959350505050565b366000806125bc8860046006600a81111561259757612596614412565b5b6125a19190613b6e565b6125ab9190613bb0565b88886110519290919263ffffffff16565b50809150507f22617564223a220000000000000000000000000000000000000000000000000078ffffffffffffffffffffffffffffffffffffffffffffffffff1916858560078461260d9190614451565b63ffffffff16908463ffffffff169261262893929190613bee565b906126339190614879565b78ffffffffffffffffffffffffffffffffffffffffffffffffff19161461268f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268690614bf4565b60405180910390fd5b60006126d08960046007600a8111156126ab576126aa614412565b5b6126b59190613b6e565b6126bf9190613bb0565b89896110519290919263ffffffff16565b5080915050600086868363ffffffff16906002856126ee9190614554565b63ffffffff169261270193929190613bee565b9061270c9190614970565b90507f222c0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806127df57507f227d0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61281e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281590614c60565b60405180910390fd5b86868463ffffffff16908463ffffffff169261283c93929190613bee565b945094505050509550959350505050565b366000806128908860046002600a81111561286b5761286a614412565b5b6128759190613b6e565b61287f9190613bb0565b88886110519290919263ffffffff16565b50809150507f226b6964223a220000000000000000000000000000000000000000000000000078ffffffffffffffffffffffffffffffffffffffffffffffffff191685856007846128e19190614451565b63ffffffff16908463ffffffff16926128fc93929190613bee565b906129079190614879565b78ffffffffffffffffffffffffffffffffffffffffffffffffff191614612963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295a90614ccc565b60405180910390fd5b60006129a48960046003600a81111561297f5761297e614412565b5b6129899190613b6e565b6129939190613bb0565b89896110519290919263ffffffff16565b5080915050600086868363ffffffff16906002856129c29190614554565b63ffffffff16926129d593929190613bee565b906129e09190614970565b90507f222c0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612ab357507f227d0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b612af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae990614d38565b60405180910390fd5b86868463ffffffff16908463ffffffff1692612b1093929190613bee565b945094505050509550959350505050565b60008060005b600115612b8757600882026030600a8663ffffffff1681612b4b57612b4a61471c565b5b0601901b81179050600a8463ffffffff1681612b6a57612b6961471c565b5b04935060008463ffffffff160315612b8757816001019150612b27565b60b081901b60001b92505050919050565b612c2e81604051602401612bac9190614d58565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061228b565b50565b600080600080600085600888901b60108a901b171790506000603f601283901c1690506000603f600c84901c1690506000603f600685901c1690506000603f85169050604051806060016040528060408152602001614e58604091398481518110612c9f57612c9e613dbe565b5b602001015160f81c60f81b9850604051806060016040528060408152602001614e58604091398381518110612cd757612cd6613dbe565b5b602001015160f81c60f81b9750604051806060016040528060408152602001614e58604091398281518110612d0f57612d0e613dbe565b5b602001015160f81c60f81b9650604051806060016040528060408152602001614e58604091398181518110612d4757612d46613dbe565b5b602001015160f81c60f81b9550505050505093509350935093565b600060606000855185518551888888604051602001612d8696959493929190614d94565b6040516020818303038152906040529050835167ffffffffffffffff811115612db257612db1612fd4565b5b6040519080825280601f01601f191660200182016040528015612de45781602001600182028036833780820191505090505b50915083516020830182516020840160055afa925050935093915050565b600080602083612e129190613bb0565b90508084511015612e5c5783836040517fde59ba13000000000000000000000000000000000000000000000000000000008152600401612e53929190614df8565b60405180910390fd5b8084015191505092915050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b612edd819050919050565b508054612ea990613833565b6000825580601f10612ebb5750612eda565b601f016020900490600052602060002090810190612ed99190612ee7565b5b50565b612ee5614e28565b565b5b80821115612f00576000816000905550600101612ee8565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f3e578082015181840152602081019050612f23565b60008484015250505050565b6000601f19601f8301169050919050565b6000612f6682612f04565b612f708185612f0f565b9350612f80818560208601612f20565b612f8981612f4a565b840191505092915050565b60006020820190508181036000830152612fae8184612f5b565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61300c82612f4a565b810181811067ffffffffffffffff8211171561302b5761302a612fd4565b5b80604052505050565b600061303e612fb6565b905061304a8282613003565b919050565b600067ffffffffffffffff82111561306a57613069612fd4565b5b61307382612f4a565b9050602081019050919050565b82818337600083830152505050565b60006130a261309d8461304f565b613034565b9050828152602081018484840111156130be576130bd612fcf565b5b6130c9848285613080565b509392505050565b600082601f8301126130e6576130e5612fca565b5b81356130f684826020860161308f565b91505092915050565b60006020828403121561311557613114612fc0565b5b600082013567ffffffffffffffff81111561313357613132612fc5565b5b61313f848285016130d1565b91505092915050565b60008115159050919050565b61315d81613148565b82525050565b60006020820190506131786000830184613154565b92915050565b6000819050919050565b6131918161317e565b811461319c57600080fd5b50565b6000813590506131ae81613188565b92915050565b6000602082840312156131ca576131c9612fc0565b5b60006131d88482850161319f565b91505092915050565b600080fd5b600080fd5b60008083601f84011261320157613200612fca565b5b8235905067ffffffffffffffff81111561321e5761321d6131e1565b5b60208301915083600182028301111561323a576132396131e6565b5b9250929050565b60008060006040848603121561325a57613259612fc0565b5b60006132688682870161319f565b935050602084013567ffffffffffffffff81111561328957613288612fc5565b5b613295868287016131eb565b92509250509250925092565b6000819050919050565b6132b4816132a1565b81146132bf57600080fd5b50565b6000813590506132d1816132ab565b92915050565b6000806000604084860312156132f0576132ef612fc0565b5b60006132fe868287016132c2565b935050602084013567ffffffffffffffff81111561331f5761331e612fc5565b5b61332b868287016131eb565b92509250509250925092565b613340816132a1565b82525050565b61334f8161317e565b82525050565b600060a08201905061336a6000830188613154565b6133776020830187613337565b6133846040830186613346565b6133916060830185613346565b61339e6080830184613346565b9695505050505050565b600067ffffffffffffffff8211156133c3576133c2612fd4565b5b602082029050602081019050919050565b60006133e76133e2846133a8565b613034565b9050808382526020820190506020840283018581111561340a576134096131e6565b5b835b8181101561345157803567ffffffffffffffff81111561342f5761342e612fca565b5b80860161343c89826130d1565b8552602085019450505060208101905061340c565b5050509392505050565b600082601f8301126134705761346f612fca565b5b81356134808482602086016133d4565b91505092915050565b60006020828403121561349f5761349e612fc0565b5b600082013567ffffffffffffffff8111156134bd576134bc612fc5565b5b6134c98482850161345b565b91505092915050565b60008083601f8401126134e8576134e7612fca565b5b8235905067ffffffffffffffff811115613505576135046131e1565b5b602083019150836020820283011115613521576135206131e6565b5b9250929050565b60008083601f84011261353e5761353d612fca565b5b8235905067ffffffffffffffff81111561355b5761355a6131e1565b5b602083019150836020820283011115613577576135766131e6565b5b9250929050565b6000806000806040858703121561359857613597612fc0565b5b600085013567ffffffffffffffff8111156135b6576135b5612fc5565b5b6135c2878288016134d2565b9450945050602085013567ffffffffffffffff8111156135e5576135e4612fc5565b5b6135f187828801613528565b925092505092959194509250565b60008060008060006060868803121561361b5761361a612fc0565b5b60006136298882890161319f565b955050602086013567ffffffffffffffff81111561364a57613649612fc5565b5b613656888289016131eb565b9450945050604086013567ffffffffffffffff81111561367957613678612fc5565b5b613685888289016131eb565b92509250509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006136bf82613694565b9050919050565b6136cf816136b4565b82525050565b60006020820190506136ea60008301846136c6565b92915050565b6136f9816136b4565b811461370457600080fd5b50565b600081359050613716816136f0565b92915050565b60006020828403121561373257613731612fc0565b5b600061374084828501613707565b91505092915050565b60008060008060006060868803121561376557613764612fc0565b5b60006137738882890161319f565b955050602086013567ffffffffffffffff81111561379457613793612fc5565b5b6137a088828901613528565b9450945050604086013567ffffffffffffffff8111156137c3576137c2612fc5565b5b6137cf88828901613528565b92509250509295509295909350565b60006020820190506137f36000830184613346565b92915050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061384b57607f821691505b60208210810361385e5761385d613804565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026138c67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613889565b6138d08683613889565b95508019841693508086168417925050509392505050565b6000819050919050565b600061390d613908613903846132a1565b6138e8565b6132a1565b9050919050565b6000819050919050565b613927836138f2565b61393b61393382613914565b848454613896565b825550505050565b600090565b613950613943565b61395b81848461391e565b505050565b5b8181101561397f57613974600082613948565b600181019050613961565b5050565b601f8211156139c45761399581613864565b61399e84613879565b810160208510156139ad578190505b6139c16139b985613879565b830182613960565b50505b505050565b600082821c905092915050565b60006139e7600019846008026139c9565b1980831691505092915050565b6000613a0083836139d6565b9150826002028217905092915050565b613a1a83836137f9565b67ffffffffffffffff811115613a3357613a32612fd4565b5b613a3d8254613833565b613a48828285613983565b6000601f831160018114613a775760008415613a65578287013590505b613a6f85826139f4565b865550613ad7565b601f198416613a8586613864565b60005b82811015613aad57848901358255600182019150602085019450602081019050613a88565b86831015613aca5784890135613ac6601f8916826139d6565b8355505b6001600288020188555050505b50505050505050565b6000613aec8385612f0f565b9350613af9838584613080565b613b0283612f4a565b840190509392505050565b6000604082019050613b226000830186613346565b8181036020830152613b35818486613ae0565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b79826132a1565b9150613b84836132a1565b9250828202613b92816132a1565b91508282048414831517613ba957613ba8613b3f565b5b5092915050565b6000613bbb826132a1565b9150613bc6836132a1565b9250828201905080821115613bde57613bdd613b3f565b5b92915050565b600080fd5b600080fd5b60008085851115613c0257613c01613be4565b5b83861115613c1357613c12613be9565b5b6001850283019150848603905094509492505050565b600081519050919050565b600081905092915050565b6000613c4a82613c29565b613c548185613c34565b9350613c64818560208601612f20565b80840191505092915050565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b6000613ca6600183613c34565b9150613cb182613c70565b600182019050919050565b6000613cc88285613c3f565b9150613cd382613c99565b9150613cdf8284613c3f565b91508190509392505050565b600081905092915050565b6000613d0182612f04565b613d0b8185613ceb565b9350613d1b818560208601612f20565b80840191505092915050565b6000613d338284613cf6565b915081905092915050565b600081519050613d4d81613188565b92915050565b600060208284031215613d6957613d68612fc0565b5b6000613d7784828501613d3e565b91505092915050565b6000613d8c8385613ceb565b9350613d99838584613080565b82840190509392505050565b6000613db2828486613d80565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613df8826132a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613e2a57613e29613b3f565b5b600182019050919050565b600082825260208201905092915050565b7f62617463685570646174654f70656e49445075626c69634b65793a20494e564160008201527f4c49445f4c454e47544800000000000000000000000000000000000000000000602082015250565b6000613ea2602a83613e35565b9150613ead82613e46565b604082019050919050565b60006020820190508181036000830152613ed181613e95565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613f0457613f03613ed8565b5b80840192508235915067ffffffffffffffff821115613f2657613f25613edd565b5b602083019250600182023603831315613f4257613f41613ee2565b5b509250929050565b7f494e56414c49445f544f4b454e00000000000000000000000000000000000000600082015250565b6000613f80600d83613e35565b9150613f8b82613f4a565b602082019050919050565b60006020820190508181036000830152613faf81613f73565b9050919050565b7f494e56414c49445f4e4f4e43455f484153480000000000000000000000000000600082015250565b6000613fec601283613e35565b9150613ff782613fb6565b602082019050919050565b6000602082019050818103600083015261401b81613fdf565b9050919050565b6000819050919050565b61403d6140388261317e565b614022565b82525050565b600061404f828561402c565b60208201915061405f828461402c565b6020820191508190509392505050565b7f494e56414c49445f5349474e4552000000000000000000000000000000000000600082015250565b60006140a5600e83613e35565b91506140b08261406f565b602082019050919050565b600060208201905081810360008301526140d481614098565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614137602683613e35565b9150614142826140db565b604082019050919050565b600060208201905081810360008301526141668161412a565b9050919050565b7f696e76616c696420617267730000000000000000000000000000000000000000600082015250565b60006141a3600c83613e35565b91506141ae8261416d565b602082019050919050565b600060208201905081810360008301526141d281614196565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061420f602083613e35565b915061421a826141d9565b602082019050919050565b6000602082019050818103600083015261423e81614202565b9050919050565b600061425082613c29565b61425a8185613e35565b935061426a818560208601612f20565b61427381612f4a565b840191505092915050565b600060208201905081810360008301526142988184614245565b905092915050565b60006142ad828688613d80565b91506142ba828486613d80565b915081905095945050505050565b7f5f6765745075626c69634b6579416e64497373486173683a20494e56414c494460008201527f5f41554400000000000000000000000000000000000000000000000000000000602082015250565b6000614324602483613e35565b915061432f826142c8565b604082019050919050565b6000602082019050818103600083015261435381614317565b9050919050565b6000614367828587613d80565b91506143738284613cf6565b9150819050949350505050565b7f5f6765745075626c69634b6579416e64497373486173683a20494e56414c494460008201527f5f5055425f4b4559000000000000000000000000000000000000000000000000602082015250565b60006143dc602883613e35565b91506143e782614380565b604082019050919050565b6000602082019050818103600083015261440b816143cf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600063ffffffff82169050919050565b600061445c82614441565b915061446783614441565b9250828203905063ffffffff81111561448357614482613b3f565b5b92915050565b600061449583836137f9565b826144a0813561317e565b925060208210156144e0576144db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802613889565b831692505b505092915050565b7f5f76616c696461746554696d657374616d703a20494e56414c49445f49415400600082015250565b600061451e601f83613e35565b9150614529826144e8565b602082019050919050565b6000602082019050818103600083015261454d81614511565b9050919050565b600061455f82614441565b915061456a83614441565b9250828201905063ffffffff81111561458657614585613b3f565b5b92915050565b7f5f76616c696461746554696d657374616d703a20494e56414c49445f45585000600082015250565b60006145c2601f83613e35565b91506145cd8261458c565b602082019050919050565b600060208201905081810360008301526145f1816145b5565b9050919050565b7f5f76616c696461746554696d657374616d703a20494e56414c49445f54494d4560008201527f5354414d50206578700000000000000000000000000000000000000000000000602082015250565b6000614654602983613e35565b915061465f826145f8565b604082019050919050565b6000602082019050818103600083015261468381614647565b9050919050565b7f5f76616c696461746554696d657374616d703a20494e56414c49445f54494d4560008201527f5354414d50206961740000000000000000000000000000000000000000000000602082015250565b60006146e6602983613e35565b91506146f18261468a565b604082019050919050565b60006020820190508181036000830152614715816146d9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614756826132a1565b9150614761836132a1565b9250826147715761477061471c565b5b828206905092915050565b6000614787826132a1565b9150614792836132a1565b92508282039050818111156147aa576147a9613b3f565b5b92915050565b60006147bb826132a1565b91506147c6836132a1565b9250826147d6576147d561471c565b5b828204905092915050565b7f5f6765744e6f6e63653a20494e56414c49445f4e4f4e43450000000000000000600082015250565b6000614817601883613e35565b9150614822826147e1565b602082019050919050565b600060208201905081810360008301526148468161480a565b9050919050565b60007fffffffffffffff0000000000000000000000000000000000000000000000000082169050919050565b600061488583836137f9565b82614890813561484d565b925060078210156148d0576148cb7fffffffffffffff0000000000000000000000000000000000000000000000000083600703600802613889565b831692505b505092915050565b7f5f6765745375623a20494e56414c49445f5355425f4c45465400000000000000600082015250565b600061490e601983613e35565b9150614919826148d8565b602082019050919050565b6000602082019050818103600083015261493d81614901565b9050919050565b60007fffff00000000000000000000000000000000000000000000000000000000000082169050919050565b600061497c83836137f9565b826149878135614944565b925060028210156149c7576149c27fffff00000000000000000000000000000000000000000000000000000000000083600203600802613889565b831692505b505092915050565b7f5f6765745375623a20494e56414c49445f5355425f5249474854000000000000600082015250565b6000614a05601a83613e35565b9150614a10826149cf565b602082019050919050565b60006020820190508181036000830152614a34816149f8565b9050919050565b6000614a46826132a1565b915060008203614a5957614a58613b3f565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000614a9a602083613e35565b9150614aa582614a64565b602082019050919050565b60006020820190508181036000830152614ac981614a8d565b9050919050565b7f5f6765744973733a20494e56414c49445f4953535f4c45465400000000000000600082015250565b6000614b06601983613e35565b9150614b1182614ad0565b602082019050919050565b60006020820190508181036000830152614b3581614af9565b9050919050565b7f5f6765744973733a20494e56414c49445f4953535f5249474854000000000000600082015250565b6000614b72601a83613e35565b9150614b7d82614b3c565b602082019050919050565b60006020820190508181036000830152614ba181614b65565b9050919050565b7f5f6765744175643a20494e56414c49445f4155445f4c45465400000000000000600082015250565b6000614bde601983613e35565b9150614be982614ba8565b602082019050919050565b60006020820190508181036000830152614c0d81614bd1565b9050919050565b7f5f6765744175643a20494e56414c49445f4155445f5249474854000000000000600082015250565b6000614c4a601a83613e35565b9150614c5582614c14565b602082019050919050565b60006020820190508181036000830152614c7981614c3d565b9050919050565b7f5f6765744b69643a20494e56414c49445f4b49445f4c45465400000000000000600082015250565b6000614cb6601983613e35565b9150614cc182614c80565b602082019050919050565b60006020820190508181036000830152614ce581614ca9565b9050919050565b7f5f6765744b69643a20494e56414c49445f4b49445f5249474854000000000000600082015250565b6000614d22601a83613e35565b9150614d2d82614cec565b602082019050919050565b60006020820190508181036000830152614d5181614d15565b9050919050565b6000602082019050614d6d6000830184613337565b92915050565b6000819050919050565b614d8e614d89826132a1565b614d73565b82525050565b6000614da08289614d7d565b602082019150614db08288614d7d565b602082019150614dc08287614d7d565b602082019150614dd08286613cf6565b9150614ddc8285613cf6565b9150614de88284613cf6565b9150819050979650505050505050565b60006040820190508181036000830152614e128185612f5b565b9050614e216020830184613337565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5fa264697066735822122074fd97bd735d38a52fcaeb62e17292a40483e47f1e5ba40bcec75f1c988eba6564736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806389c18fb011610097578063f2fde38b11610066578063f2fde38b146102af578063f80f8937146102cb578063f8a1d6a1146102e7578063f9da50511461031757610100565b806389c18fb0146102155780638da5cb5b14610245578063b785453414610263578063f22b68db1461029357610100565b80635419c5b2116100d35780635419c5b21461018b57806370043ea0146101bf578063710a5b3c146101ef578063715018a61461020b57610100565b8063295f3f741461010557806337517b79146101235780633d0e4178146101535780633ed83b641461016f575b600080fd5b61010d610347565b60405161011a9190612f94565b60405180910390f35b61013d600480360381019061013891906130ff565b61034c565b60405161014a9190613163565b60405180910390f35b61016d600480360381019061016891906131b4565b61036a565b005b61018960048036038101906101849190613241565b6103cf565b005b6101a560048036038101906101a091906132d7565b61043a565b6040516101b6959493929190613355565b60405180910390f35b6101d960048036038101906101d49190613489565b610923565b6040516101e69190613163565b60405180910390f35b6102096004803603810190610204919061357e565b61098a565b005b610213610ab0565b005b61022f600480360381019061022a91906135ff565b610ac4565b60405161023c9190613163565b60405180910390f35b61024d610ca7565b60405161025a91906136d5565b60405180910390f35b61027d600480360381019061027891906131b4565b610cd0565b60405161028a9190612f94565b60405180910390f35b6102ad60048036038101906102a891906131b4565b610d75565b005b6102c960048036038101906102c4919061371c565b610dd6565b005b6102e560048036038101906102e091906131b4565b610e59565b005b61030160048036038101906102fc91906131b4565b610ec7565b60405161030e9190613163565b60405180910390f35b610331600480360381019061032c9190613749565b610ef1565b60405161033e9190613163565b60405180910390f35b606090565b600060208251036103605760019050610365565b600090505b919050565b610372610fd3565b6002600082815260200190815260200160002060006101000a81549060ff02191690557f5a5c485156cdc63d427984d2c9b81bd8ae5d817ded95016818c43120c93fbd6d816040516103c491906137de565b60405180910390a150565b6103d7610fd3565b81816001600086815260200190815260200160002091826103f9929190613a10565b507f09c7228183e89663fa47ccbf317d3ac5e228a62848b5c29017eb05cb1a7224bc83838360405161042d93929190613b0d565b60405180910390a1505050565b60008060008060003660003660003660008d6004600b61045a9190613b6e565b6104649190613bb0565b9950600061047d8b8f8f6110519290919263ffffffff16565b809c5081925050508d8d8c908363ffffffff168e61049b9190613bb0565b926104a893929190613bee565b965096508063ffffffff168b6104be9190613bb0565b9a506104d58b8f8f6110519290919263ffffffff16565b809c5081925050508d8d8c908363ffffffff168e6104f39190613bb0565b9261050093929190613bee565b945094508063ffffffff168b6105169190613bb0565b9a5061052d8b8f8f6110519290919263ffffffff16565b809c5081925050508d8d8c908363ffffffff168e61054b9190613bb0565b9261055893929190613bee565b925092508063ffffffff168b61056e9190613bb0565b9a50506105af6040518060400160405280600681526020017f4865616465720000000000000000000000000000000000000000000000000000815250611073565b6105fc86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061110c565b61063a6040518060400160405280600781526020017f7061796c6f616400000000000000000000000000000000000000000000000000815250611073565b61068784848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061110c565b6106c56040518060400160405280600981526020017f7369676e61747572650000000000000000000000000000000000000000000000815250611073565b61071282828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061110c565b60606107238f8f8f8a8a8a8a6111a5565b809250819b5050506107388f8f8f888861133d565b6108c5600261078a89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611670565b6107d788888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611670565b6040516020016107e8929190613cbc565b6040516020818303038152906040526040516108049190613d27565b602060405180830381855afa158015610821573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906108449190613d53565b826040518060400160405280600381526020017f010001000000000000000000000000000000000000000000000000000000000081525086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611aa2565b9b506108d48f8f8f8888611af1565b6040516108e2929190613da5565b604051809103902097506108f98f8f8f8888611c08565b604051610907929190613da5565b6040518091039020985050505050505050939792965093509350565b600080600090505b825181101561097f57600061095984838151811061094c5761094b613dbe565b5b602002602001015161034c565b90508061096b57600092505050610985565b50808061097790613ded565b91505061092b565b50600190505b919050565b610992610fd3565b60008484905090508282905081146109df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d690613eb8565b60405180910390fd5b60005b81811015610aa85760008686838181106109ff576109fe613dbe565b5b905060200201359050366000868685818110610a1e57610a1d613dbe565b5b9050602002810190610a309190613ee7565b915091508181600160008681526020019081526020016000209182610a56929190613a10565b507f09c7228183e89663fa47ccbf317d3ac5e228a62848b5c29017eb05cb1a7224bc838383604051610a8a93929190613b0d565b60405180910390a15050508080610aa090613ded565b9150506109e2565b505050505050565b610ab8610fd3565b610ac26000611edb565b565b6000806000806000610ad86000888861043a565b94509450945050935083610b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1890613f96565b60405180910390fd5b610b5f6040518060400160405280601581526020017f557365722076616c69646174696f6e2073746172740000000000000000000000815250611073565b610b75610b708b60001c6020611f9f565b61110c565b610b7e816121db565b610b878a6121db565b80610b968b60001c6020611f9f565b8051906020012014610bdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd490614002565b60405180910390fd5b60008383604051602001610bf2929190614043565b604051602081830303815290604052805190602001209050610c168a8a6000612274565b8114610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4e906140bb565b60405180910390fd5b610c956040518060400160405280601381526020017f557365722076616c69646174696f6e20656e6400000000000000000000000000815250611073565b60019550505050505095945050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600160008381526020019081526020016000208054610cf090613833565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1c90613833565b8015610d695780601f10610d3e57610100808354040283529160200191610d69565b820191906000526020600020905b815481529060010190602001808311610d4c57829003601f168201915b50505050509050919050565b610d7d610fd3565b600160008281526020019081526020016000206000610d9c9190612e9d565b7f2dcad5593eade66ba317c839f2c7cd4b40bf9348055df767870cc43eb955e99f81604051610dcb91906137de565b60405180910390a150565b610dde610fd3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e449061414d565b60405180910390fd5b610e5681611edb565b50565b610e61610fd3565b60016002600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fac3cfe69fe75d1ba90e2d1259e5fc2aded0b228ca8b387e0985454d2a58d5ef481604051610ebc91906137de565b60405180910390a150565b60006002600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000828290508585905014610f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f32906141b9565b60405180910390fd5b60005b85859050811015610fc4576000610f9e88888885818110610f6257610f61613dbe565b5b9050602002810190610f749190613ee7565b888887818110610f8757610f86613dbe565b5b9050602002810190610f999190613ee7565b610ac4565b905080610fb057600092505050610fca565b508080610fbc90613ded565b915050610f3e565b50600190505b95945050505050565b610fdb612283565b73ffffffffffffffffffffffffffffffffffffffff16610ff9610ca7565b73ffffffffffffffffffffffffffffffffffffffff161461104f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104690614225565b60405180910390fd5b565b6000808483013563ffffffff8160e01c16925060048401915050935093915050565b61110981604051602401611087919061427e565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061228b565b50565b6111a2816040516024016111209190612f94565b6040516020818303038152906040527f0be77f56000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061228b565b50565b600060603660006111b98b8b8b89896122a5565b9150915081816040516111cd929190613da5565b604051809103902093503660006111e78d8d8d8b8b612579565b915091506112208484848460405160200161120594939291906142a0565b60405160208183030381529060405280519060200120610ec7565b61125f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112569061433a565b60405180910390fd5b600061126e8e8e8e8e8e61284d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506112e68585836040516020016112cb9392919061435a565b60405160208183030381529060405280519060200120610cd0565b9550600086511161132c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611323906143f2565b60405180910390fd5b505050505097509795505050505050565b366000806113808860046009600a81111561135b5761135a614412565b5b6113659190613b6e565b61136f9190613bb0565b88886110519290919263ffffffff16565b50809150507f22696174223a000000000000000000000000000000000000000000000000000085856006846113b59190614451565b63ffffffff16908463ffffffff16926113d093929190613bee565b906113db9190614489565b1461141b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141290614534565b60405180910390fd5b84848263ffffffff1690600a846114329190614554565b63ffffffff169261144593929190613bee565b92509250503660008061148c8a6004600a8081111561146757611466614412565b5b6114719190613b6e565b61147b9190613bb0565b8a8a6110519290919263ffffffff16565b50809150507f22657870223a000000000000000000000000000000000000000000000000000087876006846114c19190614451565b63ffffffff16908463ffffffff16926114dc93929190613bee565b906114e79190614489565b14611527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151e906145d8565b60405180910390fd5b86868263ffffffff1690600a8461153e9190614554565b63ffffffff169261155193929190613bee565b9250925050600061156142612b21565b90506115a16040518060400160405280600381526020017f4e6f770000000000000000000000000000000000000000000000000000000000815250611073565b6115aa816121db565b6115b342612b98565b6115c88585906115c39190614489565b6121db565b8282906115d59190614489565b8110611616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160d9061466a565b60405180910390fd5b8484906116239190614489565b8111611664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165b906146fc565b60405180910390fd5b50505050505050505050565b60606000829050600060038251611687919061474b565b90506000600382600361169a919061477c565b6116a4919061474b565b60046003600286516116b69190613bb0565b6116c091906147b0565b6116ca9190613b6e565b6116d4919061477c565b905060008167ffffffffffffffff8111156116f2576116f1612fd4565b5b6040519080825280601f01601f1916602001820160405280156117245781602001600182028036833780820191505090505b5090506000805b855160038361173a9190613bb0565b11611912576117cb86838151811061175557611754613dbe565b5b602001015160f81c60f81b60f81c60ff16876001856117749190613bb0565b8151811061178557611784613dbe565b5b602001015160f81c60f81b60f81c60ff16886002866117a49190613bb0565b815181106117b5576117b4613dbe565b5b602001015160f81c60f81b60f81c60ff16612c31565b8685815181106117de576117dd613dbe565b5b60200101876001876117f09190613bb0565b8151811061180157611800613dbe565b5b60200101886002886118139190613bb0565b8151811061182457611823613dbe565b5b60200101896003896118369190613bb0565b8151811061184757611846613dbe565b5b60200101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660001a9053847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660001a9053847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660001a9053847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660001a9053505050506004816118fc9190613bb0565b905060038261190b9190613bb0565b915061172b565b60008514611a945760008686885161192a919061477c565b8151811061193b5761193a613dbe565b5b602001015160f81c60f81b60f81c9050600060028703611986578760018951611964919061477c565b8151811061197557611974613dbe565b5b602001015160f81c60f81b60f81c90505b600080600061199d8560ff168560ff166000612c31565b50925092509250828887815181106119b8576119b7613dbe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081886001886119f69190613bb0565b81518110611a0757611a06613dbe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060028a03611a8e578088600288611a4d9190613bb0565b81518110611a5e57611a5d613dbe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b50505050505b829650505050505050919050565b6000806060611ab2848688612d62565b8092508193505050818015611ae55750611ae260208251611ad3919061477c565b82612e0290919063ffffffff16565b87145b92505050949350505050565b36600080611b348860046008600a811115611b0f57611b0e614412565b5b611b199190613b6e565b611b239190613bb0565b88886110519290919263ffffffff16565b50809150507f226e6f6e6365223a2200000000000000000000000000000000000000000000008585600984611b699190614451565b63ffffffff16908463ffffffff1692611b8493929190613bee565b90611b8f9190614489565b14611bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc69061482d565b60405180910390fd5b84848263ffffffff1690604284611be69190614554565b63ffffffff1692611bf993929190613bee565b92509250509550959350505050565b36600080611c4a88600480600a811115611c2557611c24614412565b5b611c2f9190613b6e565b611c399190613bb0565b88886110519290919263ffffffff16565b50809150507f22737562223a220000000000000000000000000000000000000000000000000078ffffffffffffffffffffffffffffffffffffffffffffffffff19168585600784611c9b9190614451565b63ffffffff16908463ffffffff1692611cb693929190613bee565b90611cc19190614879565b78ffffffffffffffffffffffffffffffffffffffffffffffffff191614611d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1490614924565b60405180910390fd5b6000611d5e8960046005600a811115611d3957611d38614412565b5b611d439190613b6e565b611d4d9190613bb0565b89896110519290919263ffffffff16565b5080915050600086868363ffffffff1690600285611d7c9190614554565b63ffffffff1692611d8f93929190613bee565b90611d9a9190614970565b90507f222c0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611e6d57507f227d0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea390614a1b565b60405180910390fd5b86868463ffffffff16908463ffffffff1692611eca93929190613bee565b945094505050509550959350505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060006002836002611fb29190613b6e565b611fbc9190613bb0565b67ffffffffffffffff811115611fd557611fd4612fd4565b5b6040519080825280601f01601f1916602001820160405280156120075781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061203f5761203e613dbe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106120a3576120a2613dbe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026120e39190613b6e565b6120ed9190613bb0565b90505b600181111561218d577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061212f5761212e613dbe565b5b1a60f81b82828151811061214657612145613dbe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061218690614a3b565b90506120f0565b50600084146121d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c890614ab0565b60405180910390fd5b8091505092915050565b612271816040516024016121ef91906137de565b6040516020818303038152906040527f27b7cf85000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061228b565b50565b60008184013590509392505050565b600033905090565b6122a28161229a612e69612e92565b63ffffffff16565b50565b366000806122e88860046000600a8111156122c3576122c2614412565b5b6122cd9190613b6e565b6122d79190613bb0565b88886110519290919263ffffffff16565b50809150507f22697373223a220000000000000000000000000000000000000000000000000078ffffffffffffffffffffffffffffffffffffffffffffffffff191685856007846123399190614451565b63ffffffff16908463ffffffff169261235493929190613bee565b9061235f9190614879565b78ffffffffffffffffffffffffffffffffffffffffffffffffff1916146123bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b290614b1c565b60405180910390fd5b60006123fc8960046001600a8111156123d7576123d6614412565b5b6123e19190613b6e565b6123eb9190613bb0565b89896110519290919263ffffffff16565b5080915050600086868363ffffffff169060028561241a9190614554565b63ffffffff169261242d93929190613bee565b906124389190614970565b90507f222c0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061250b57507f227d0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61254a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254190614b88565b60405180910390fd5b86868463ffffffff16908463ffffffff169261256893929190613bee565b945094505050509550959350505050565b366000806125bc8860046006600a81111561259757612596614412565b5b6125a19190613b6e565b6125ab9190613bb0565b88886110519290919263ffffffff16565b50809150507f22617564223a220000000000000000000000000000000000000000000000000078ffffffffffffffffffffffffffffffffffffffffffffffffff1916858560078461260d9190614451565b63ffffffff16908463ffffffff169261262893929190613bee565b906126339190614879565b78ffffffffffffffffffffffffffffffffffffffffffffffffff19161461268f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268690614bf4565b60405180910390fd5b60006126d08960046007600a8111156126ab576126aa614412565b5b6126b59190613b6e565b6126bf9190613bb0565b89896110519290919263ffffffff16565b5080915050600086868363ffffffff16906002856126ee9190614554565b63ffffffff169261270193929190613bee565b9061270c9190614970565b90507f222c0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806127df57507f227d0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61281e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281590614c60565b60405180910390fd5b86868463ffffffff16908463ffffffff169261283c93929190613bee565b945094505050509550959350505050565b366000806128908860046002600a81111561286b5761286a614412565b5b6128759190613b6e565b61287f9190613bb0565b88886110519290919263ffffffff16565b50809150507f226b6964223a220000000000000000000000000000000000000000000000000078ffffffffffffffffffffffffffffffffffffffffffffffffff191685856007846128e19190614451565b63ffffffff16908463ffffffff16926128fc93929190613bee565b906129079190614879565b78ffffffffffffffffffffffffffffffffffffffffffffffffff191614612963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295a90614ccc565b60405180910390fd5b60006129a48960046003600a81111561297f5761297e614412565b5b6129899190613b6e565b6129939190613bb0565b89896110519290919263ffffffff16565b5080915050600086868363ffffffff16906002856129c29190614554565b63ffffffff16926129d593929190613bee565b906129e09190614970565b90507f222c0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612ab357507f227d0000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b612af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae990614d38565b60405180910390fd5b86868463ffffffff16908463ffffffff1692612b1093929190613bee565b945094505050509550959350505050565b60008060005b600115612b8757600882026030600a8663ffffffff1681612b4b57612b4a61471c565b5b0601901b81179050600a8463ffffffff1681612b6a57612b6961471c565b5b04935060008463ffffffff160315612b8757816001019150612b27565b60b081901b60001b92505050919050565b612c2e81604051602401612bac9190614d58565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061228b565b50565b600080600080600085600888901b60108a901b171790506000603f601283901c1690506000603f600c84901c1690506000603f600685901c1690506000603f85169050604051806060016040528060408152602001614e58604091398481518110612c9f57612c9e613dbe565b5b602001015160f81c60f81b9850604051806060016040528060408152602001614e58604091398381518110612cd757612cd6613dbe565b5b602001015160f81c60f81b9750604051806060016040528060408152602001614e58604091398281518110612d0f57612d0e613dbe565b5b602001015160f81c60f81b9650604051806060016040528060408152602001614e58604091398181518110612d4757612d46613dbe565b5b602001015160f81c60f81b9550505050505093509350935093565b600060606000855185518551888888604051602001612d8696959493929190614d94565b6040516020818303038152906040529050835167ffffffffffffffff811115612db257612db1612fd4565b5b6040519080825280601f01601f191660200182016040528015612de45781602001600182028036833780820191505090505b50915083516020830182516020840160055afa925050935093915050565b600080602083612e129190613bb0565b90508084511015612e5c5783836040517fde59ba13000000000000000000000000000000000000000000000000000000008152600401612e53929190614df8565b60405180910390fd5b8084015191505092915050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b612edd819050919050565b508054612ea990613833565b6000825580601f10612ebb5750612eda565b601f016020900490600052602060002090810190612ed99190612ee7565b5b50565b612ee5614e28565b565b5b80821115612f00576000816000905550600101612ee8565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f3e578082015181840152602081019050612f23565b60008484015250505050565b6000601f19601f8301169050919050565b6000612f6682612f04565b612f708185612f0f565b9350612f80818560208601612f20565b612f8981612f4a565b840191505092915050565b60006020820190508181036000830152612fae8184612f5b565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61300c82612f4a565b810181811067ffffffffffffffff8211171561302b5761302a612fd4565b5b80604052505050565b600061303e612fb6565b905061304a8282613003565b919050565b600067ffffffffffffffff82111561306a57613069612fd4565b5b61307382612f4a565b9050602081019050919050565b82818337600083830152505050565b60006130a261309d8461304f565b613034565b9050828152602081018484840111156130be576130bd612fcf565b5b6130c9848285613080565b509392505050565b600082601f8301126130e6576130e5612fca565b5b81356130f684826020860161308f565b91505092915050565b60006020828403121561311557613114612fc0565b5b600082013567ffffffffffffffff81111561313357613132612fc5565b5b61313f848285016130d1565b91505092915050565b60008115159050919050565b61315d81613148565b82525050565b60006020820190506131786000830184613154565b92915050565b6000819050919050565b6131918161317e565b811461319c57600080fd5b50565b6000813590506131ae81613188565b92915050565b6000602082840312156131ca576131c9612fc0565b5b60006131d88482850161319f565b91505092915050565b600080fd5b600080fd5b60008083601f84011261320157613200612fca565b5b8235905067ffffffffffffffff81111561321e5761321d6131e1565b5b60208301915083600182028301111561323a576132396131e6565b5b9250929050565b60008060006040848603121561325a57613259612fc0565b5b60006132688682870161319f565b935050602084013567ffffffffffffffff81111561328957613288612fc5565b5b613295868287016131eb565b92509250509250925092565b6000819050919050565b6132b4816132a1565b81146132bf57600080fd5b50565b6000813590506132d1816132ab565b92915050565b6000806000604084860312156132f0576132ef612fc0565b5b60006132fe868287016132c2565b935050602084013567ffffffffffffffff81111561331f5761331e612fc5565b5b61332b868287016131eb565b92509250509250925092565b613340816132a1565b82525050565b61334f8161317e565b82525050565b600060a08201905061336a6000830188613154565b6133776020830187613337565b6133846040830186613346565b6133916060830185613346565b61339e6080830184613346565b9695505050505050565b600067ffffffffffffffff8211156133c3576133c2612fd4565b5b602082029050602081019050919050565b60006133e76133e2846133a8565b613034565b9050808382526020820190506020840283018581111561340a576134096131e6565b5b835b8181101561345157803567ffffffffffffffff81111561342f5761342e612fca565b5b80860161343c89826130d1565b8552602085019450505060208101905061340c565b5050509392505050565b600082601f8301126134705761346f612fca565b5b81356134808482602086016133d4565b91505092915050565b60006020828403121561349f5761349e612fc0565b5b600082013567ffffffffffffffff8111156134bd576134bc612fc5565b5b6134c98482850161345b565b91505092915050565b60008083601f8401126134e8576134e7612fca565b5b8235905067ffffffffffffffff811115613505576135046131e1565b5b602083019150836020820283011115613521576135206131e6565b5b9250929050565b60008083601f84011261353e5761353d612fca565b5b8235905067ffffffffffffffff81111561355b5761355a6131e1565b5b602083019150836020820283011115613577576135766131e6565b5b9250929050565b6000806000806040858703121561359857613597612fc0565b5b600085013567ffffffffffffffff8111156135b6576135b5612fc5565b5b6135c2878288016134d2565b9450945050602085013567ffffffffffffffff8111156135e5576135e4612fc5565b5b6135f187828801613528565b925092505092959194509250565b60008060008060006060868803121561361b5761361a612fc0565b5b60006136298882890161319f565b955050602086013567ffffffffffffffff81111561364a57613649612fc5565b5b613656888289016131eb565b9450945050604086013567ffffffffffffffff81111561367957613678612fc5565b5b613685888289016131eb565b92509250509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006136bf82613694565b9050919050565b6136cf816136b4565b82525050565b60006020820190506136ea60008301846136c6565b92915050565b6136f9816136b4565b811461370457600080fd5b50565b600081359050613716816136f0565b92915050565b60006020828403121561373257613731612fc0565b5b600061374084828501613707565b91505092915050565b60008060008060006060868803121561376557613764612fc0565b5b60006137738882890161319f565b955050602086013567ffffffffffffffff81111561379457613793612fc5565b5b6137a088828901613528565b9450945050604086013567ffffffffffffffff8111156137c3576137c2612fc5565b5b6137cf88828901613528565b92509250509295509295909350565b60006020820190506137f36000830184613346565b92915050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061384b57607f821691505b60208210810361385e5761385d613804565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026138c67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613889565b6138d08683613889565b95508019841693508086168417925050509392505050565b6000819050919050565b600061390d613908613903846132a1565b6138e8565b6132a1565b9050919050565b6000819050919050565b613927836138f2565b61393b61393382613914565b848454613896565b825550505050565b600090565b613950613943565b61395b81848461391e565b505050565b5b8181101561397f57613974600082613948565b600181019050613961565b5050565b601f8211156139c45761399581613864565b61399e84613879565b810160208510156139ad578190505b6139c16139b985613879565b830182613960565b50505b505050565b600082821c905092915050565b60006139e7600019846008026139c9565b1980831691505092915050565b6000613a0083836139d6565b9150826002028217905092915050565b613a1a83836137f9565b67ffffffffffffffff811115613a3357613a32612fd4565b5b613a3d8254613833565b613a48828285613983565b6000601f831160018114613a775760008415613a65578287013590505b613a6f85826139f4565b865550613ad7565b601f198416613a8586613864565b60005b82811015613aad57848901358255600182019150602085019450602081019050613a88565b86831015613aca5784890135613ac6601f8916826139d6565b8355505b6001600288020188555050505b50505050505050565b6000613aec8385612f0f565b9350613af9838584613080565b613b0283612f4a565b840190509392505050565b6000604082019050613b226000830186613346565b8181036020830152613b35818486613ae0565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b79826132a1565b9150613b84836132a1565b9250828202613b92816132a1565b91508282048414831517613ba957613ba8613b3f565b5b5092915050565b6000613bbb826132a1565b9150613bc6836132a1565b9250828201905080821115613bde57613bdd613b3f565b5b92915050565b600080fd5b600080fd5b60008085851115613c0257613c01613be4565b5b83861115613c1357613c12613be9565b5b6001850283019150848603905094509492505050565b600081519050919050565b600081905092915050565b6000613c4a82613c29565b613c548185613c34565b9350613c64818560208601612f20565b80840191505092915050565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b6000613ca6600183613c34565b9150613cb182613c70565b600182019050919050565b6000613cc88285613c3f565b9150613cd382613c99565b9150613cdf8284613c3f565b91508190509392505050565b600081905092915050565b6000613d0182612f04565b613d0b8185613ceb565b9350613d1b818560208601612f20565b80840191505092915050565b6000613d338284613cf6565b915081905092915050565b600081519050613d4d81613188565b92915050565b600060208284031215613d6957613d68612fc0565b5b6000613d7784828501613d3e565b91505092915050565b6000613d8c8385613ceb565b9350613d99838584613080565b82840190509392505050565b6000613db2828486613d80565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613df8826132a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613e2a57613e29613b3f565b5b600182019050919050565b600082825260208201905092915050565b7f62617463685570646174654f70656e49445075626c69634b65793a20494e564160008201527f4c49445f4c454e47544800000000000000000000000000000000000000000000602082015250565b6000613ea2602a83613e35565b9150613ead82613e46565b604082019050919050565b60006020820190508181036000830152613ed181613e95565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613f0457613f03613ed8565b5b80840192508235915067ffffffffffffffff821115613f2657613f25613edd565b5b602083019250600182023603831315613f4257613f41613ee2565b5b509250929050565b7f494e56414c49445f544f4b454e00000000000000000000000000000000000000600082015250565b6000613f80600d83613e35565b9150613f8b82613f4a565b602082019050919050565b60006020820190508181036000830152613faf81613f73565b9050919050565b7f494e56414c49445f4e4f4e43455f484153480000000000000000000000000000600082015250565b6000613fec601283613e35565b9150613ff782613fb6565b602082019050919050565b6000602082019050818103600083015261401b81613fdf565b9050919050565b6000819050919050565b61403d6140388261317e565b614022565b82525050565b600061404f828561402c565b60208201915061405f828461402c565b6020820191508190509392505050565b7f494e56414c49445f5349474e4552000000000000000000000000000000000000600082015250565b60006140a5600e83613e35565b91506140b08261406f565b602082019050919050565b600060208201905081810360008301526140d481614098565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614137602683613e35565b9150614142826140db565b604082019050919050565b600060208201905081810360008301526141668161412a565b9050919050565b7f696e76616c696420617267730000000000000000000000000000000000000000600082015250565b60006141a3600c83613e35565b91506141ae8261416d565b602082019050919050565b600060208201905081810360008301526141d281614196565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061420f602083613e35565b915061421a826141d9565b602082019050919050565b6000602082019050818103600083015261423e81614202565b9050919050565b600061425082613c29565b61425a8185613e35565b935061426a818560208601612f20565b61427381612f4a565b840191505092915050565b600060208201905081810360008301526142988184614245565b905092915050565b60006142ad828688613d80565b91506142ba828486613d80565b915081905095945050505050565b7f5f6765745075626c69634b6579416e64497373486173683a20494e56414c494460008201527f5f41554400000000000000000000000000000000000000000000000000000000602082015250565b6000614324602483613e35565b915061432f826142c8565b604082019050919050565b6000602082019050818103600083015261435381614317565b9050919050565b6000614367828587613d80565b91506143738284613cf6565b9150819050949350505050565b7f5f6765745075626c69634b6579416e64497373486173683a20494e56414c494460008201527f5f5055425f4b4559000000000000000000000000000000000000000000000000602082015250565b60006143dc602883613e35565b91506143e782614380565b604082019050919050565b6000602082019050818103600083015261440b816143cf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600063ffffffff82169050919050565b600061445c82614441565b915061446783614441565b9250828203905063ffffffff81111561448357614482613b3f565b5b92915050565b600061449583836137f9565b826144a0813561317e565b925060208210156144e0576144db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802613889565b831692505b505092915050565b7f5f76616c696461746554696d657374616d703a20494e56414c49445f49415400600082015250565b600061451e601f83613e35565b9150614529826144e8565b602082019050919050565b6000602082019050818103600083015261454d81614511565b9050919050565b600061455f82614441565b915061456a83614441565b9250828201905063ffffffff81111561458657614585613b3f565b5b92915050565b7f5f76616c696461746554696d657374616d703a20494e56414c49445f45585000600082015250565b60006145c2601f83613e35565b91506145cd8261458c565b602082019050919050565b600060208201905081810360008301526145f1816145b5565b9050919050565b7f5f76616c696461746554696d657374616d703a20494e56414c49445f54494d4560008201527f5354414d50206578700000000000000000000000000000000000000000000000602082015250565b6000614654602983613e35565b915061465f826145f8565b604082019050919050565b6000602082019050818103600083015261468381614647565b9050919050565b7f5f76616c696461746554696d657374616d703a20494e56414c49445f54494d4560008201527f5354414d50206961740000000000000000000000000000000000000000000000602082015250565b60006146e6602983613e35565b91506146f18261468a565b604082019050919050565b60006020820190508181036000830152614715816146d9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614756826132a1565b9150614761836132a1565b9250826147715761477061471c565b5b828206905092915050565b6000614787826132a1565b9150614792836132a1565b92508282039050818111156147aa576147a9613b3f565b5b92915050565b60006147bb826132a1565b91506147c6836132a1565b9250826147d6576147d561471c565b5b828204905092915050565b7f5f6765744e6f6e63653a20494e56414c49445f4e4f4e43450000000000000000600082015250565b6000614817601883613e35565b9150614822826147e1565b602082019050919050565b600060208201905081810360008301526148468161480a565b9050919050565b60007fffffffffffffff0000000000000000000000000000000000000000000000000082169050919050565b600061488583836137f9565b82614890813561484d565b925060078210156148d0576148cb7fffffffffffffff0000000000000000000000000000000000000000000000000083600703600802613889565b831692505b505092915050565b7f5f6765745375623a20494e56414c49445f5355425f4c45465400000000000000600082015250565b600061490e601983613e35565b9150614919826148d8565b602082019050919050565b6000602082019050818103600083015261493d81614901565b9050919050565b60007fffff00000000000000000000000000000000000000000000000000000000000082169050919050565b600061497c83836137f9565b826149878135614944565b925060028210156149c7576149c27fffff00000000000000000000000000000000000000000000000000000000000083600203600802613889565b831692505b505092915050565b7f5f6765745375623a20494e56414c49445f5355425f5249474854000000000000600082015250565b6000614a05601a83613e35565b9150614a10826149cf565b602082019050919050565b60006020820190508181036000830152614a34816149f8565b9050919050565b6000614a46826132a1565b915060008203614a5957614a58613b3f565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000614a9a602083613e35565b9150614aa582614a64565b602082019050919050565b60006020820190508181036000830152614ac981614a8d565b9050919050565b7f5f6765744973733a20494e56414c49445f4953535f4c45465400000000000000600082015250565b6000614b06601983613e35565b9150614b1182614ad0565b602082019050919050565b60006020820190508181036000830152614b3581614af9565b9050919050565b7f5f6765744973733a20494e56414c49445f4953535f5249474854000000000000600082015250565b6000614b72601a83613e35565b9150614b7d82614b3c565b602082019050919050565b60006020820190508181036000830152614ba181614b65565b9050919050565b7f5f6765744175643a20494e56414c49445f4155445f4c45465400000000000000600082015250565b6000614bde601983613e35565b9150614be982614ba8565b602082019050919050565b60006020820190508181036000830152614c0d81614bd1565b9050919050565b7f5f6765744175643a20494e56414c49445f4155445f5249474854000000000000600082015250565b6000614c4a601a83613e35565b9150614c5582614c14565b602082019050919050565b60006020820190508181036000830152614c7981614c3d565b9050919050565b7f5f6765744b69643a20494e56414c49445f4b49445f4c45465400000000000000600082015250565b6000614cb6601983613e35565b9150614cc182614c80565b602082019050919050565b60006020820190508181036000830152614ce581614ca9565b9050919050565b7f5f6765744b69643a20494e56414c49445f4b49445f5249474854000000000000600082015250565b6000614d22601a83613e35565b9150614d2d82614cec565b602082019050919050565b60006020820190508181036000830152614d5181614d15565b9050919050565b6000602082019050614d6d6000830184613337565b92915050565b6000819050919050565b614d8e614d89826132a1565b614d73565b82525050565b6000614da08289614d7d565b602082019150614db08288614d7d565b602082019150614dc08287614d7d565b602082019150614dd08286613cf6565b9150614ddc8285613cf6565b9150614de88284613cf6565b9150819050979650505050505050565b60006040820190508181036000830152614e128185612f5b565b9050614e216020830184613337565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5fa264697066735822122074fd97bd735d38a52fcaeb62e17292a40483e47f1e5ba40bcec75f1c988eba6564736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getGuardianVerifierInfo()": {
        "details": "Return supported signer key information, format, signature format, hash algorithm, etc. MAY TODO:using ERC-3668: ccip-read"
      },
      "isValidPermission(bytes32,bytes,bytes)": {
        "details": "Validate signature"
      },
      "isValidPermissions(bytes32,bytes[],bytes[])": {
        "details": "Validate signatures"
      },
      "isValidSigners(bytes[])": {
        "details": "Check if the signer key format is correct"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/verifier/openid/OpenIDVerifier.sol:OpenIDVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16971,
        "contract": "src/verifier/openid/OpenIDVerifier.sol:OpenIDVerifier",
        "label": "openIDPublicKey",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 16901,
        "contract": "src/verifier/openid/OpenIDVerifier.sol:OpenIDVerifier",
        "label": "openIDAudience",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      }
    }
  }
}