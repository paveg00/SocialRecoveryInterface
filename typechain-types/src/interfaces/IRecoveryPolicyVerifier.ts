/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type IdentityStruct = {
  guardianVerifier: AddressLike;
  signer: BytesLike;
};

export type IdentityStructOutput = [
  guardianVerifier: string,
  signer: string
] & { guardianVerifier: string; signer: string };

export type PermissionStruct = {
  guardian: IdentityStruct;
  signature: BytesLike;
};

export type PermissionStructOutput = [
  guardian: IdentityStructOutput,
  signature: string
] & { guardian: IdentityStructOutput; signature: string };

export interface IRecoveryPolicyVerifierInterface extends Interface {
  getFunction(
    nameOrSignature: "getPolicyVerifierInfo" | "verifyRecoveryPolicy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPolicyVerifierInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRecoveryPolicy",
    values: [PermissionStruct[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPolicyVerifierInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRecoveryPolicy",
    data: BytesLike
  ): Result;
}

export interface IRecoveryPolicyVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): IRecoveryPolicyVerifier;
  waitForDeployment(): Promise<this>;

  interface: IRecoveryPolicyVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPolicyVerifierInfo: TypedContractMethod<[], [string], "view">;

  verifyRecoveryPolicy: TypedContractMethod<
    [permissions: PermissionStruct[], properties: BigNumberish[]],
    [[boolean, bigint] & { succ: boolean; weight: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPolicyVerifierInfo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyRecoveryPolicy"
  ): TypedContractMethod<
    [permissions: PermissionStruct[], properties: BigNumberish[]],
    [[boolean, bigint] & { succ: boolean; weight: bigint }],
    "view"
  >;

  filters: {};
}
