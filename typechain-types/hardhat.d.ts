/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "FallbackManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FallbackManager__factory>;
    getContractFactory(
      name: "BaseGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseGuard__factory>;
    getContractFactory(
      name: "Guard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Guard__factory>;
    getContractFactory(
      name: "GuardManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GuardManager__factory>;
    getContractFactory(
      name: "ModuleManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleManager__factory>;
    getContractFactory(
      name: "OwnerManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerManager__factory>;
    getContractFactory(
      name: "NativeCurrencyPaymentFallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NativeCurrencyPaymentFallback__factory>;
    getContractFactory(
      name: "StorageAccessible",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StorageAccessible__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ISignatureValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignatureValidator__factory>;
    getContractFactory(
      name: "IProxyCreationCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxyCreationCallback__factory>;
    getContractFactory(
      name: "IProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxy__factory>;
    getContractFactory(
      name: "SafeProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeProxy__factory>;
    getContractFactory(
      name: "SafeProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeProxyFactory__factory>;
    getContractFactory(
      name: "Safe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Safe__factory>;
    getContractFactory(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccount__factory>;
    getContractFactory(
      name: "IPermissionVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPermissionVerifier__factory>;
    getContractFactory(
      name: "IRecoveryAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRecoveryAccount__factory>;
    getContractFactory(
      name: "IRecoveryPolicyVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRecoveryPolicyVerifier__factory>;
    getContractFactory(
      name: "ISafe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISafe__factory>;
    getContractFactory(
      name: "LibBytes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibBytes__factory>;
    getContractFactory(
      name: "RecoveryModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RecoveryModule__factory>;
    getContractFactory(
      name: "TestAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAccount__factory>;
    getContractFactory(
      name: "DkimKeys",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DkimKeys__factory>;
    getContractFactory(
      name: "EmailVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmailVerifier__factory>;
    getContractFactory(
      name: "AudManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AudManager__factory>;
    getContractFactory(
      name: "OpenIDKeyManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenIDKeyManager__factory>;
    getContractFactory(
      name: "OpenIDVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenIDVerifier__factory>;
    getContractFactory(
      name: "SingleKeyVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SingleKeyVerifier__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1271",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "FallbackManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FallbackManager>;
    getContractAt(
      name: "BaseGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseGuard>;
    getContractAt(
      name: "Guard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Guard>;
    getContractAt(
      name: "GuardManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GuardManager>;
    getContractAt(
      name: "ModuleManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleManager>;
    getContractAt(
      name: "OwnerManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerManager>;
    getContractAt(
      name: "NativeCurrencyPaymentFallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NativeCurrencyPaymentFallback>;
    getContractAt(
      name: "StorageAccessible",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StorageAccessible>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ISignatureValidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignatureValidator>;
    getContractAt(
      name: "IProxyCreationCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxyCreationCallback>;
    getContractAt(
      name: "IProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxy>;
    getContractAt(
      name: "SafeProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeProxy>;
    getContractAt(
      name: "SafeProxyFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeProxyFactory>;
    getContractAt(
      name: "Safe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Safe>;
    getContractAt(
      name: "IAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccount>;
    getContractAt(
      name: "IPermissionVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPermissionVerifier>;
    getContractAt(
      name: "IRecoveryAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRecoveryAccount>;
    getContractAt(
      name: "IRecoveryPolicyVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRecoveryPolicyVerifier>;
    getContractAt(
      name: "ISafe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISafe>;
    getContractAt(
      name: "LibBytes",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibBytes>;
    getContractAt(
      name: "RecoveryModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RecoveryModule>;
    getContractAt(
      name: "TestAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAccount>;
    getContractAt(
      name: "DkimKeys",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DkimKeys>;
    getContractAt(
      name: "EmailVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmailVerifier>;
    getContractAt(
      name: "AudManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AudManager>;
    getContractAt(
      name: "OpenIDKeyManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OpenIDKeyManager>;
    getContractAt(
      name: "OpenIDVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OpenIDVerifier>;
    getContractAt(
      name: "SingleKeyVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SingleKeyVerifier>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "FallbackManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FallbackManager>;
    deployContract(
      name: "BaseGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseGuard>;
    deployContract(
      name: "Guard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Guard>;
    deployContract(
      name: "GuardManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GuardManager>;
    deployContract(
      name: "ModuleManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ModuleManager>;
    deployContract(
      name: "OwnerManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnerManager>;
    deployContract(
      name: "NativeCurrencyPaymentFallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NativeCurrencyPaymentFallback>;
    deployContract(
      name: "StorageAccessible",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StorageAccessible>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "ISignatureValidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISignatureValidator>;
    deployContract(
      name: "IProxyCreationCallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProxyCreationCallback>;
    deployContract(
      name: "IProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProxy>;
    deployContract(
      name: "SafeProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeProxy>;
    deployContract(
      name: "SafeProxyFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeProxyFactory>;
    deployContract(
      name: "Safe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Safe>;
    deployContract(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccount>;
    deployContract(
      name: "IPermissionVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPermissionVerifier>;
    deployContract(
      name: "IRecoveryAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRecoveryAccount>;
    deployContract(
      name: "IRecoveryPolicyVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRecoveryPolicyVerifier>;
    deployContract(
      name: "ISafe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISafe>;
    deployContract(
      name: "LibBytes",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibBytes>;
    deployContract(
      name: "RecoveryModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RecoveryModule>;
    deployContract(
      name: "TestAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestAccount>;
    deployContract(
      name: "DkimKeys",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DkimKeys>;
    deployContract(
      name: "EmailVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmailVerifier>;
    deployContract(
      name: "AudManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AudManager>;
    deployContract(
      name: "OpenIDKeyManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OpenIDKeyManager>;
    deployContract(
      name: "OpenIDVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OpenIDVerifier>;
    deployContract(
      name: "SingleKeyVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SingleKeyVerifier>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1271",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "FallbackManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FallbackManager>;
    deployContract(
      name: "BaseGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseGuard>;
    deployContract(
      name: "Guard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Guard>;
    deployContract(
      name: "GuardManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GuardManager>;
    deployContract(
      name: "ModuleManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ModuleManager>;
    deployContract(
      name: "OwnerManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnerManager>;
    deployContract(
      name: "NativeCurrencyPaymentFallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NativeCurrencyPaymentFallback>;
    deployContract(
      name: "StorageAccessible",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StorageAccessible>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "ISignatureValidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISignatureValidator>;
    deployContract(
      name: "IProxyCreationCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProxyCreationCallback>;
    deployContract(
      name: "IProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProxy>;
    deployContract(
      name: "SafeProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeProxy>;
    deployContract(
      name: "SafeProxyFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeProxyFactory>;
    deployContract(
      name: "Safe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Safe>;
    deployContract(
      name: "IAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccount>;
    deployContract(
      name: "IPermissionVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPermissionVerifier>;
    deployContract(
      name: "IRecoveryAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRecoveryAccount>;
    deployContract(
      name: "IRecoveryPolicyVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRecoveryPolicyVerifier>;
    deployContract(
      name: "ISafe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISafe>;
    deployContract(
      name: "LibBytes",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibBytes>;
    deployContract(
      name: "RecoveryModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RecoveryModule>;
    deployContract(
      name: "TestAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestAccount>;
    deployContract(
      name: "DkimKeys",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DkimKeys>;
    deployContract(
      name: "EmailVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmailVerifier>;
    deployContract(
      name: "AudManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AudManager>;
    deployContract(
      name: "OpenIDKeyManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OpenIDKeyManager>;
    deployContract(
      name: "OpenIDVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OpenIDVerifier>;
    deployContract(
      name: "SingleKeyVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SingleKeyVerifier>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
