/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  AudManager,
  AudManagerInterface,
} from "../../../../src/verifier/openid/AudManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "_key",
        type: "bytes32",
      },
    ],
    name: "AddOpenIDAudience",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "_key",
        type: "bytes32",
      },
    ],
    name: "DeleteOpenIDAudience",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_key",
        type: "bytes32",
      },
    ],
    name: "addOpenIDAudience",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_key",
        type: "bytes32",
      },
    ],
    name: "deleteOpenIDAudience",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_key",
        type: "bytes32",
      },
    ],
    name: "isAudienceValid",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6106db8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80633d0e417814610067578063715018a6146100835780638da5cb5b1461008d578063f2fde38b146100ab578063f80f8937146100c7578063f8a1d6a1146100e3575b600080fd5b610081600480360381019061007c9190610454565b610113565b005b61008b610178565b005b61009561018c565b6040516100a291906104c2565b60405180910390f35b6100c560048036038101906100c09190610509565b6101b5565b005b6100e160048036038101906100dc9190610454565b610238565b005b6100fd60048036038101906100f89190610454565b6102a5565b60405161010a9190610551565b60405180910390f35b61011b6102cf565b6001600082815260200190815260200160002060006101000a81549060ff02191690557f5a5c485156cdc63d427984d2c9b81bd8ae5d817ded95016818c43120c93fbd6d8160405161016d919061057b565b60405180910390a150565b6101806102cf565b61018a600061034d565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101bd6102cf565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361022c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022390610619565b60405180910390fd5b6102358161034d565b50565b6102406102cf565b600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fac3cfe69fe75d1ba90e2d1259e5fc2aded0b228ca8b387e0985454d2a58d5ef48160405161029a919061057b565b60405180910390a150565b60006001600083815260200190815260200160002060009054906101000a900460ff169050919050565b6102d7610411565b73ffffffffffffffffffffffffffffffffffffffff166102f561018c565b73ffffffffffffffffffffffffffffffffffffffff161461034b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034290610685565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b6104318161041e565b811461043c57600080fd5b50565b60008135905061044e81610428565b92915050565b60006020828403121561046a57610469610419565b5b60006104788482850161043f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104ac82610481565b9050919050565b6104bc816104a1565b82525050565b60006020820190506104d760008301846104b3565b92915050565b6104e6816104a1565b81146104f157600080fd5b50565b600081359050610503816104dd565b92915050565b60006020828403121561051f5761051e610419565b5b600061052d848285016104f4565b91505092915050565b60008115159050919050565b61054b81610536565b82525050565b60006020820190506105666000830184610542565b92915050565b6105758161041e565b82525050565b6000602082019050610590600083018461056c565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610603602683610596565b915061060e826105a7565b604082019050919050565b60006020820190508181036000830152610632816105f6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061066f602083610596565b915061067a82610639565b602082019050919050565b6000602082019050818103600083015261069e81610662565b905091905056fea2646970667358221220eab02942ff77ad0b825c57374fe549e48c08c5d2d607096c963a867e0ced1bc664736f6c63430008130033";

type AudManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AudManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AudManager__factory extends ContractFactory {
  constructor(...args: AudManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AudManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AudManager__factory {
    return super.connect(runner) as AudManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AudManagerInterface {
    return new Interface(_abi) as AudManagerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): AudManager {
    return new Contract(address, _abi, runner) as unknown as AudManager;
  }
}
